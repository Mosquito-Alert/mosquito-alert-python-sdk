# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, List, Optional
from typing_extensions import Annotated
from mosquito_alert.models.location_request import LocationRequest
from mosquito_alert.models.observation import Observation
from mosquito_alert.models.paginated_observation_list import PaginatedObservationList
from mosquito_alert.models.simple_photo_request import SimplePhotoRequest

from mosquito_alert.api_client import ApiClient, RequestSerialized
from mosquito_alert.api_response import ApiResponse
from mosquito_alert.rest import RESTResponseType


class ObservationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create(
        self,
        created_at: datetime,
        sent_at: datetime,
        location: LocationRequest,
        photos: List[SimplePhotoRequest],
        note: Annotated[Optional[StrictStr], Field(description="Note user attached to report.")] = None,
        tags: Optional[List[Annotated[str, Field(min_length=1, strict=True)]]] = None,
        event_environment: Annotated[Optional[StrictStr], Field(description="The environment where the event took place.")] = None,
        event_moment: Annotated[Optional[StrictStr], Field(description="The moment of the day when the event took place.")] = None,
        mosquito_appearance: Annotated[Optional[Any], Field(description="User-provided description of the mosquito's appearance")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Observation:
        """create


        :param created_at: (required)
        :type created_at: datetime
        :param sent_at: (required)
        :type sent_at: datetime
        :param location: (required)
        :type location: LocationRequest
        :param photos: (required)
        :type photos: List[SimplePhotoRequest]
        :param note: Note user attached to report.
        :type note: str
        :param tags:
        :type tags: List[str]
        :param event_environment: The environment where the event took place.
        :type event_environment: str
        :param event_moment: The moment of the day when the event took place.
        :type event_moment: str
        :param mosquito_appearance: User-provided description of the mosquito's appearance
        :type mosquito_appearance: MosquitoAppearanceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_serialize(
            created_at=created_at,
            sent_at=sent_at,
            location=location,
            photos=photos,
            note=note,
            tags=tags,
            event_environment=event_environment,
            event_moment=event_moment,
            mosquito_appearance=mosquito_appearance,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ObservationsCreateValidationError",
            '401': "ErrorResponse401",
            '403': "ErrorResponse403",
            '404': "ErrorResponse404",
            '201': "Observation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_with_http_info(
        self,
        created_at: datetime,
        sent_at: datetime,
        location: LocationRequest,
        photos: List[SimplePhotoRequest],
        note: Annotated[Optional[StrictStr], Field(description="Note user attached to report.")] = None,
        tags: Optional[List[Annotated[str, Field(min_length=1, strict=True)]]] = None,
        event_environment: Annotated[Optional[StrictStr], Field(description="The environment where the event took place.")] = None,
        event_moment: Annotated[Optional[StrictStr], Field(description="The moment of the day when the event took place.")] = None,
        mosquito_appearance: Annotated[Optional[Any], Field(description="User-provided description of the mosquito's appearance")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Observation]:
        """create


        :param created_at: (required)
        :type created_at: datetime
        :param sent_at: (required)
        :type sent_at: datetime
        :param location: (required)
        :type location: LocationRequest
        :param photos: (required)
        :type photos: List[SimplePhotoRequest]
        :param note: Note user attached to report.
        :type note: str
        :param tags:
        :type tags: List[str]
        :param event_environment: The environment where the event took place.
        :type event_environment: str
        :param event_moment: The moment of the day when the event took place.
        :type event_moment: str
        :param mosquito_appearance: User-provided description of the mosquito's appearance
        :type mosquito_appearance: MosquitoAppearanceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_serialize(
            created_at=created_at,
            sent_at=sent_at,
            location=location,
            photos=photos,
            note=note,
            tags=tags,
            event_environment=event_environment,
            event_moment=event_moment,
            mosquito_appearance=mosquito_appearance,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ObservationsCreateValidationError",
            '401': "ErrorResponse401",
            '403': "ErrorResponse403",
            '404': "ErrorResponse404",
            '201': "Observation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_without_preload_content(
        self,
        created_at: datetime,
        sent_at: datetime,
        location: LocationRequest,
        photos: List[SimplePhotoRequest],
        note: Annotated[Optional[StrictStr], Field(description="Note user attached to report.")] = None,
        tags: Optional[List[Annotated[str, Field(min_length=1, strict=True)]]] = None,
        event_environment: Annotated[Optional[StrictStr], Field(description="The environment where the event took place.")] = None,
        event_moment: Annotated[Optional[StrictStr], Field(description="The moment of the day when the event took place.")] = None,
        mosquito_appearance: Annotated[Optional[Any], Field(description="User-provided description of the mosquito's appearance")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create


        :param created_at: (required)
        :type created_at: datetime
        :param sent_at: (required)
        :type sent_at: datetime
        :param location: (required)
        :type location: LocationRequest
        :param photos: (required)
        :type photos: List[SimplePhotoRequest]
        :param note: Note user attached to report.
        :type note: str
        :param tags:
        :type tags: List[str]
        :param event_environment: The environment where the event took place.
        :type event_environment: str
        :param event_moment: The moment of the day when the event took place.
        :type event_moment: str
        :param mosquito_appearance: User-provided description of the mosquito's appearance
        :type mosquito_appearance: MosquitoAppearanceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_serialize(
            created_at=created_at,
            sent_at=sent_at,
            location=location,
            photos=photos,
            note=note,
            tags=tags,
            event_environment=event_environment,
            event_moment=event_moment,
            mosquito_appearance=mosquito_appearance,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ObservationsCreateValidationError",
            '401': "ErrorResponse401",
            '403': "ErrorResponse403",
            '404': "ErrorResponse404",
            '201': "Observation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_serialize(
        self,
        created_at,
        sent_at,
        location,
        photos,
        note,
        tags,
        event_environment,
        event_moment,
        mosquito_appearance,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'photos': 'csv',
            'tags': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if created_at is not None:
            _form_params.append(('created_at', created_at))
        if sent_at is not None:
            _form_params.append(('sent_at', sent_at))
        if location is not None:
            _form_params.append(('location', location))
        if note is not None:
            _form_params.append(('note', note))
        if tags is not None:
            _form_params.append(('tags', tags))
        if photos is not None:
            _form_params.append(('photos', photos))
        if event_environment is not None:
            _form_params.append(('event_environment', event_environment))
        if event_moment is not None:
            _form_params.append(('event_moment', event_moment))
        if mosquito_appearance is not None:
            _form_params.append(('mosquito_appearance', mosquito_appearance))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth', 
            'cookieAuth', 
            'jwtAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/observations/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def destroy(
        self,
        uuid: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """destroy


        :param uuid: (required)
        :type uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._destroy_serialize(
            uuid=uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse401",
            '403': "ErrorResponse403",
            '404': "ErrorResponse404",
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def destroy_with_http_info(
        self,
        uuid: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """destroy


        :param uuid: (required)
        :type uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._destroy_serialize(
            uuid=uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse401",
            '403': "ErrorResponse403",
            '404': "ErrorResponse404",
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def destroy_without_preload_content(
        self,
        uuid: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """destroy


        :param uuid: (required)
        :type uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._destroy_serialize(
            uuid=uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse401",
            '403': "ErrorResponse403",
            '404': "ErrorResponse404",
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _destroy_serialize(
        self,
        uuid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if uuid is not None:
            _path_params['uuid'] = uuid
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth', 
            'cookieAuth', 
            'jwtAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/observations/{uuid}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list(
        self,
        country_id: Optional[StrictInt] = None,
        created_at_after: Annotated[Optional[datetime], Field(description="Created at")] = None,
        created_at_before: Annotated[Optional[datetime], Field(description="Created at")] = None,
        has_photos: Annotated[Optional[StrictBool], Field(description="Has any photo")] = None,
        identification_taxon_ids: Optional[List[StrictInt]] = None,
        order_by: Annotated[Optional[List[StrictStr]], Field(description="Ordenado  ")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        received_at_after: Annotated[Optional[datetime], Field(description="Received at")] = None,
        received_at_before: Annotated[Optional[datetime], Field(description="Received at")] = None,
        short_id: Annotated[Optional[StrictStr], Field(description="Short ID")] = None,
        updated_at_after: Annotated[Optional[datetime], Field(description="Update at")] = None,
        updated_at_before: Annotated[Optional[datetime], Field(description="Update at")] = None,
        user_uuid: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedObservationList:
        """list


        :param country_id:
        :type country_id: int
        :param created_at_after: Created at
        :type created_at_after: datetime
        :param created_at_before: Created at
        :type created_at_before: datetime
        :param has_photos: Has any photo
        :type has_photos: bool
        :param identification_taxon_ids:
        :type identification_taxon_ids: List[int]
        :param order_by: Ordenado  
        :type order_by: List[str]
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param received_at_after: Received at
        :type received_at_after: datetime
        :param received_at_before: Received at
        :type received_at_before: datetime
        :param short_id: Short ID
        :type short_id: str
        :param updated_at_after: Update at
        :type updated_at_after: datetime
        :param updated_at_before: Update at
        :type updated_at_before: datetime
        :param user_uuid:
        :type user_uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_serialize(
            country_id=country_id,
            created_at_after=created_at_after,
            created_at_before=created_at_before,
            has_photos=has_photos,
            identification_taxon_ids=identification_taxon_ids,
            order_by=order_by,
            page=page,
            page_size=page_size,
            received_at_after=received_at_after,
            received_at_before=received_at_before,
            short_id=short_id,
            updated_at_after=updated_at_after,
            updated_at_before=updated_at_before,
            user_uuid=user_uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ObservationsListValidationError",
            '401': "ErrorResponse401",
            '404': "ErrorResponse404",
            '200': "PaginatedObservationList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_with_http_info(
        self,
        country_id: Optional[StrictInt] = None,
        created_at_after: Annotated[Optional[datetime], Field(description="Created at")] = None,
        created_at_before: Annotated[Optional[datetime], Field(description="Created at")] = None,
        has_photos: Annotated[Optional[StrictBool], Field(description="Has any photo")] = None,
        identification_taxon_ids: Optional[List[StrictInt]] = None,
        order_by: Annotated[Optional[List[StrictStr]], Field(description="Ordenado  ")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        received_at_after: Annotated[Optional[datetime], Field(description="Received at")] = None,
        received_at_before: Annotated[Optional[datetime], Field(description="Received at")] = None,
        short_id: Annotated[Optional[StrictStr], Field(description="Short ID")] = None,
        updated_at_after: Annotated[Optional[datetime], Field(description="Update at")] = None,
        updated_at_before: Annotated[Optional[datetime], Field(description="Update at")] = None,
        user_uuid: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedObservationList]:
        """list


        :param country_id:
        :type country_id: int
        :param created_at_after: Created at
        :type created_at_after: datetime
        :param created_at_before: Created at
        :type created_at_before: datetime
        :param has_photos: Has any photo
        :type has_photos: bool
        :param identification_taxon_ids:
        :type identification_taxon_ids: List[int]
        :param order_by: Ordenado  
        :type order_by: List[str]
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param received_at_after: Received at
        :type received_at_after: datetime
        :param received_at_before: Received at
        :type received_at_before: datetime
        :param short_id: Short ID
        :type short_id: str
        :param updated_at_after: Update at
        :type updated_at_after: datetime
        :param updated_at_before: Update at
        :type updated_at_before: datetime
        :param user_uuid:
        :type user_uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_serialize(
            country_id=country_id,
            created_at_after=created_at_after,
            created_at_before=created_at_before,
            has_photos=has_photos,
            identification_taxon_ids=identification_taxon_ids,
            order_by=order_by,
            page=page,
            page_size=page_size,
            received_at_after=received_at_after,
            received_at_before=received_at_before,
            short_id=short_id,
            updated_at_after=updated_at_after,
            updated_at_before=updated_at_before,
            user_uuid=user_uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ObservationsListValidationError",
            '401': "ErrorResponse401",
            '404': "ErrorResponse404",
            '200': "PaginatedObservationList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_without_preload_content(
        self,
        country_id: Optional[StrictInt] = None,
        created_at_after: Annotated[Optional[datetime], Field(description="Created at")] = None,
        created_at_before: Annotated[Optional[datetime], Field(description="Created at")] = None,
        has_photos: Annotated[Optional[StrictBool], Field(description="Has any photo")] = None,
        identification_taxon_ids: Optional[List[StrictInt]] = None,
        order_by: Annotated[Optional[List[StrictStr]], Field(description="Ordenado  ")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        received_at_after: Annotated[Optional[datetime], Field(description="Received at")] = None,
        received_at_before: Annotated[Optional[datetime], Field(description="Received at")] = None,
        short_id: Annotated[Optional[StrictStr], Field(description="Short ID")] = None,
        updated_at_after: Annotated[Optional[datetime], Field(description="Update at")] = None,
        updated_at_before: Annotated[Optional[datetime], Field(description="Update at")] = None,
        user_uuid: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list


        :param country_id:
        :type country_id: int
        :param created_at_after: Created at
        :type created_at_after: datetime
        :param created_at_before: Created at
        :type created_at_before: datetime
        :param has_photos: Has any photo
        :type has_photos: bool
        :param identification_taxon_ids:
        :type identification_taxon_ids: List[int]
        :param order_by: Ordenado  
        :type order_by: List[str]
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param received_at_after: Received at
        :type received_at_after: datetime
        :param received_at_before: Received at
        :type received_at_before: datetime
        :param short_id: Short ID
        :type short_id: str
        :param updated_at_after: Update at
        :type updated_at_after: datetime
        :param updated_at_before: Update at
        :type updated_at_before: datetime
        :param user_uuid:
        :type user_uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_serialize(
            country_id=country_id,
            created_at_after=created_at_after,
            created_at_before=created_at_before,
            has_photos=has_photos,
            identification_taxon_ids=identification_taxon_ids,
            order_by=order_by,
            page=page,
            page_size=page_size,
            received_at_after=received_at_after,
            received_at_before=received_at_before,
            short_id=short_id,
            updated_at_after=updated_at_after,
            updated_at_before=updated_at_before,
            user_uuid=user_uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ObservationsListValidationError",
            '401': "ErrorResponse401",
            '404': "ErrorResponse404",
            '200': "PaginatedObservationList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_serialize(
        self,
        country_id,
        created_at_after,
        created_at_before,
        has_photos,
        identification_taxon_ids,
        order_by,
        page,
        page_size,
        received_at_after,
        received_at_before,
        short_id,
        updated_at_after,
        updated_at_before,
        user_uuid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'identification_taxon_ids': 'multi',
            'order_by': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if country_id is not None:
            
            _query_params.append(('country_id', country_id))
            
        if created_at_after is not None:
            if isinstance(created_at_after, datetime):
                _query_params.append(
                    (
                        'created_at_after',
                        created_at_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at_after', created_at_after))
            
        if created_at_before is not None:
            if isinstance(created_at_before, datetime):
                _query_params.append(
                    (
                        'created_at_before',
                        created_at_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at_before', created_at_before))
            
        if has_photos is not None:
            
            _query_params.append(('has_photos', has_photos))
            
        if identification_taxon_ids is not None:
            
            _query_params.append(('identification_taxon_ids', identification_taxon_ids))
            
        if order_by is not None:
            
            _query_params.append(('order_by', order_by))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if received_at_after is not None:
            if isinstance(received_at_after, datetime):
                _query_params.append(
                    (
                        'received_at_after',
                        received_at_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('received_at_after', received_at_after))
            
        if received_at_before is not None:
            if isinstance(received_at_before, datetime):
                _query_params.append(
                    (
                        'received_at_before',
                        received_at_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('received_at_before', received_at_before))
            
        if short_id is not None:
            
            _query_params.append(('short_id', short_id))
            
        if updated_at_after is not None:
            if isinstance(updated_at_after, datetime):
                _query_params.append(
                    (
                        'updated_at_after',
                        updated_at_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_at_after', updated_at_after))
            
        if updated_at_before is not None:
            if isinstance(updated_at_before, datetime):
                _query_params.append(
                    (
                        'updated_at_before',
                        updated_at_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_at_before', updated_at_before))
            
        if user_uuid is not None:
            
            _query_params.append(('user_uuid', user_uuid))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth', 
            'cookieAuth', 
            'jwtAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/observations/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_mine(
        self,
        country_id: Optional[StrictInt] = None,
        created_at_after: Annotated[Optional[datetime], Field(description="Created at")] = None,
        created_at_before: Annotated[Optional[datetime], Field(description="Created at")] = None,
        has_photos: Annotated[Optional[StrictBool], Field(description="Has any photo")] = None,
        identification_taxon_ids: Optional[List[StrictInt]] = None,
        order_by: Annotated[Optional[List[StrictStr]], Field(description="Ordenado  ")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        received_at_after: Annotated[Optional[datetime], Field(description="Received at")] = None,
        received_at_before: Annotated[Optional[datetime], Field(description="Received at")] = None,
        short_id: Annotated[Optional[StrictStr], Field(description="Short ID")] = None,
        updated_at_after: Annotated[Optional[datetime], Field(description="Update at")] = None,
        updated_at_before: Annotated[Optional[datetime], Field(description="Update at")] = None,
        user_uuid: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedObservationList:
        """list_mine

        Get Current User's Observations

        :param country_id:
        :type country_id: int
        :param created_at_after: Created at
        :type created_at_after: datetime
        :param created_at_before: Created at
        :type created_at_before: datetime
        :param has_photos: Has any photo
        :type has_photos: bool
        :param identification_taxon_ids:
        :type identification_taxon_ids: List[int]
        :param order_by: Ordenado  
        :type order_by: List[str]
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param received_at_after: Received at
        :type received_at_after: datetime
        :param received_at_before: Received at
        :type received_at_before: datetime
        :param short_id: Short ID
        :type short_id: str
        :param updated_at_after: Update at
        :type updated_at_after: datetime
        :param updated_at_before: Update at
        :type updated_at_before: datetime
        :param user_uuid:
        :type user_uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_mine_serialize(
            country_id=country_id,
            created_at_after=created_at_after,
            created_at_before=created_at_before,
            has_photos=has_photos,
            identification_taxon_ids=identification_taxon_ids,
            order_by=order_by,
            page=page,
            page_size=page_size,
            received_at_after=received_at_after,
            received_at_before=received_at_before,
            short_id=short_id,
            updated_at_after=updated_at_after,
            updated_at_before=updated_at_before,
            user_uuid=user_uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ObservationsListMineValidationError",
            '401': "ErrorResponse401",
            '403': "ErrorResponse403",
            '404': "ErrorResponse404",
            '200': "PaginatedObservationList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_mine_with_http_info(
        self,
        country_id: Optional[StrictInt] = None,
        created_at_after: Annotated[Optional[datetime], Field(description="Created at")] = None,
        created_at_before: Annotated[Optional[datetime], Field(description="Created at")] = None,
        has_photos: Annotated[Optional[StrictBool], Field(description="Has any photo")] = None,
        identification_taxon_ids: Optional[List[StrictInt]] = None,
        order_by: Annotated[Optional[List[StrictStr]], Field(description="Ordenado  ")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        received_at_after: Annotated[Optional[datetime], Field(description="Received at")] = None,
        received_at_before: Annotated[Optional[datetime], Field(description="Received at")] = None,
        short_id: Annotated[Optional[StrictStr], Field(description="Short ID")] = None,
        updated_at_after: Annotated[Optional[datetime], Field(description="Update at")] = None,
        updated_at_before: Annotated[Optional[datetime], Field(description="Update at")] = None,
        user_uuid: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedObservationList]:
        """list_mine

        Get Current User's Observations

        :param country_id:
        :type country_id: int
        :param created_at_after: Created at
        :type created_at_after: datetime
        :param created_at_before: Created at
        :type created_at_before: datetime
        :param has_photos: Has any photo
        :type has_photos: bool
        :param identification_taxon_ids:
        :type identification_taxon_ids: List[int]
        :param order_by: Ordenado  
        :type order_by: List[str]
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param received_at_after: Received at
        :type received_at_after: datetime
        :param received_at_before: Received at
        :type received_at_before: datetime
        :param short_id: Short ID
        :type short_id: str
        :param updated_at_after: Update at
        :type updated_at_after: datetime
        :param updated_at_before: Update at
        :type updated_at_before: datetime
        :param user_uuid:
        :type user_uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_mine_serialize(
            country_id=country_id,
            created_at_after=created_at_after,
            created_at_before=created_at_before,
            has_photos=has_photos,
            identification_taxon_ids=identification_taxon_ids,
            order_by=order_by,
            page=page,
            page_size=page_size,
            received_at_after=received_at_after,
            received_at_before=received_at_before,
            short_id=short_id,
            updated_at_after=updated_at_after,
            updated_at_before=updated_at_before,
            user_uuid=user_uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ObservationsListMineValidationError",
            '401': "ErrorResponse401",
            '403': "ErrorResponse403",
            '404': "ErrorResponse404",
            '200': "PaginatedObservationList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_mine_without_preload_content(
        self,
        country_id: Optional[StrictInt] = None,
        created_at_after: Annotated[Optional[datetime], Field(description="Created at")] = None,
        created_at_before: Annotated[Optional[datetime], Field(description="Created at")] = None,
        has_photos: Annotated[Optional[StrictBool], Field(description="Has any photo")] = None,
        identification_taxon_ids: Optional[List[StrictInt]] = None,
        order_by: Annotated[Optional[List[StrictStr]], Field(description="Ordenado  ")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        received_at_after: Annotated[Optional[datetime], Field(description="Received at")] = None,
        received_at_before: Annotated[Optional[datetime], Field(description="Received at")] = None,
        short_id: Annotated[Optional[StrictStr], Field(description="Short ID")] = None,
        updated_at_after: Annotated[Optional[datetime], Field(description="Update at")] = None,
        updated_at_before: Annotated[Optional[datetime], Field(description="Update at")] = None,
        user_uuid: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_mine

        Get Current User's Observations

        :param country_id:
        :type country_id: int
        :param created_at_after: Created at
        :type created_at_after: datetime
        :param created_at_before: Created at
        :type created_at_before: datetime
        :param has_photos: Has any photo
        :type has_photos: bool
        :param identification_taxon_ids:
        :type identification_taxon_ids: List[int]
        :param order_by: Ordenado  
        :type order_by: List[str]
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param received_at_after: Received at
        :type received_at_after: datetime
        :param received_at_before: Received at
        :type received_at_before: datetime
        :param short_id: Short ID
        :type short_id: str
        :param updated_at_after: Update at
        :type updated_at_after: datetime
        :param updated_at_before: Update at
        :type updated_at_before: datetime
        :param user_uuid:
        :type user_uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_mine_serialize(
            country_id=country_id,
            created_at_after=created_at_after,
            created_at_before=created_at_before,
            has_photos=has_photos,
            identification_taxon_ids=identification_taxon_ids,
            order_by=order_by,
            page=page,
            page_size=page_size,
            received_at_after=received_at_after,
            received_at_before=received_at_before,
            short_id=short_id,
            updated_at_after=updated_at_after,
            updated_at_before=updated_at_before,
            user_uuid=user_uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '400': "ObservationsListMineValidationError",
            '401': "ErrorResponse401",
            '403': "ErrorResponse403",
            '404': "ErrorResponse404",
            '200': "PaginatedObservationList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_mine_serialize(
        self,
        country_id,
        created_at_after,
        created_at_before,
        has_photos,
        identification_taxon_ids,
        order_by,
        page,
        page_size,
        received_at_after,
        received_at_before,
        short_id,
        updated_at_after,
        updated_at_before,
        user_uuid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'identification_taxon_ids': 'multi',
            'order_by': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if country_id is not None:
            
            _query_params.append(('country_id', country_id))
            
        if created_at_after is not None:
            if isinstance(created_at_after, datetime):
                _query_params.append(
                    (
                        'created_at_after',
                        created_at_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at_after', created_at_after))
            
        if created_at_before is not None:
            if isinstance(created_at_before, datetime):
                _query_params.append(
                    (
                        'created_at_before',
                        created_at_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_at_before', created_at_before))
            
        if has_photos is not None:
            
            _query_params.append(('has_photos', has_photos))
            
        if identification_taxon_ids is not None:
            
            _query_params.append(('identification_taxon_ids', identification_taxon_ids))
            
        if order_by is not None:
            
            _query_params.append(('order_by', order_by))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if received_at_after is not None:
            if isinstance(received_at_after, datetime):
                _query_params.append(
                    (
                        'received_at_after',
                        received_at_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('received_at_after', received_at_after))
            
        if received_at_before is not None:
            if isinstance(received_at_before, datetime):
                _query_params.append(
                    (
                        'received_at_before',
                        received_at_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('received_at_before', received_at_before))
            
        if short_id is not None:
            
            _query_params.append(('short_id', short_id))
            
        if updated_at_after is not None:
            if isinstance(updated_at_after, datetime):
                _query_params.append(
                    (
                        'updated_at_after',
                        updated_at_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_at_after', updated_at_after))
            
        if updated_at_before is not None:
            if isinstance(updated_at_before, datetime):
                _query_params.append(
                    (
                        'updated_at_before',
                        updated_at_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_at_before', updated_at_before))
            
        if user_uuid is not None:
            
            _query_params.append(('user_uuid', user_uuid))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth', 
            'cookieAuth', 
            'jwtAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/me/observations/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def retrieve(
        self,
        uuid: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Observation:
        """retrieve


        :param uuid: (required)
        :type uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_serialize(
            uuid=uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse401",
            '404': "ErrorResponse404",
            '200': "Observation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def retrieve_with_http_info(
        self,
        uuid: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Observation]:
        """retrieve


        :param uuid: (required)
        :type uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_serialize(
            uuid=uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse401",
            '404': "ErrorResponse404",
            '200': "Observation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def retrieve_without_preload_content(
        self,
        uuid: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """retrieve


        :param uuid: (required)
        :type uuid: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_serialize(
            uuid=uuid,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "ErrorResponse401",
            '404': "ErrorResponse404",
            '200': "Observation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _retrieve_serialize(
        self,
        uuid,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if uuid is not None:
            _path_params['uuid'] = uuid
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth', 
            'cookieAuth', 
            'jwtAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/observations/{uuid}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


