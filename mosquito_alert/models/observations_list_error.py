# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from mosquito_alert.models.observations_list_country_id_error_component import ObservationsListCountryIdErrorComponent
from mosquito_alert.models.observations_list_created_at_error_component import ObservationsListCreatedAtErrorComponent
from mosquito_alert.models.observations_list_identification_taxon_error_component import ObservationsListIdentificationTaxonErrorComponent
from mosquito_alert.models.observations_list_order_by_error_component import ObservationsListOrderByErrorComponent
from mosquito_alert.models.observations_list_received_at_error_component import ObservationsListReceivedAtErrorComponent
from mosquito_alert.models.observations_list_short_id_error_component import ObservationsListShortIdErrorComponent
from mosquito_alert.models.observations_list_updated_at_error_component import ObservationsListUpdatedAtErrorComponent
from mosquito_alert.models.observations_list_user_uuid_error_component import ObservationsListUserUuidErrorComponent
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

OBSERVATIONSLISTERROR_ONE_OF_SCHEMAS = ["ObservationsListCountryIdErrorComponent", "ObservationsListCreatedAtErrorComponent", "ObservationsListIdentificationTaxonErrorComponent", "ObservationsListOrderByErrorComponent", "ObservationsListReceivedAtErrorComponent", "ObservationsListShortIdErrorComponent", "ObservationsListUpdatedAtErrorComponent", "ObservationsListUserUuidErrorComponent"]

class ObservationsListError(BaseModel):
    """
    ObservationsListError
    """
    # data type: ObservationsListShortIdErrorComponent
    oneof_schema_1_validator: Optional[ObservationsListShortIdErrorComponent] = None
    # data type: ObservationsListCreatedAtErrorComponent
    oneof_schema_2_validator: Optional[ObservationsListCreatedAtErrorComponent] = None
    # data type: ObservationsListReceivedAtErrorComponent
    oneof_schema_3_validator: Optional[ObservationsListReceivedAtErrorComponent] = None
    # data type: ObservationsListUpdatedAtErrorComponent
    oneof_schema_4_validator: Optional[ObservationsListUpdatedAtErrorComponent] = None
    # data type: ObservationsListCountryIdErrorComponent
    oneof_schema_5_validator: Optional[ObservationsListCountryIdErrorComponent] = None
    # data type: ObservationsListUserUuidErrorComponent
    oneof_schema_6_validator: Optional[ObservationsListUserUuidErrorComponent] = None
    # data type: ObservationsListOrderByErrorComponent
    oneof_schema_7_validator: Optional[ObservationsListOrderByErrorComponent] = None
    # data type: ObservationsListIdentificationTaxonErrorComponent
    oneof_schema_8_validator: Optional[ObservationsListIdentificationTaxonErrorComponent] = None
    actual_instance: Optional[Union[ObservationsListCountryIdErrorComponent, ObservationsListCreatedAtErrorComponent, ObservationsListIdentificationTaxonErrorComponent, ObservationsListOrderByErrorComponent, ObservationsListReceivedAtErrorComponent, ObservationsListShortIdErrorComponent, ObservationsListUpdatedAtErrorComponent, ObservationsListUserUuidErrorComponent]] = None
    one_of_schemas: Set[str] = { "ObservationsListCountryIdErrorComponent", "ObservationsListCreatedAtErrorComponent", "ObservationsListIdentificationTaxonErrorComponent", "ObservationsListOrderByErrorComponent", "ObservationsListReceivedAtErrorComponent", "ObservationsListShortIdErrorComponent", "ObservationsListUpdatedAtErrorComponent", "ObservationsListUserUuidErrorComponent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ObservationsListError.model_construct()
        error_messages = []
        match = 0
        # validate data type: ObservationsListShortIdErrorComponent
        if not isinstance(v, ObservationsListShortIdErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsListShortIdErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsListCreatedAtErrorComponent
        if not isinstance(v, ObservationsListCreatedAtErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsListCreatedAtErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsListReceivedAtErrorComponent
        if not isinstance(v, ObservationsListReceivedAtErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsListReceivedAtErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsListUpdatedAtErrorComponent
        if not isinstance(v, ObservationsListUpdatedAtErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsListUpdatedAtErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsListCountryIdErrorComponent
        if not isinstance(v, ObservationsListCountryIdErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsListCountryIdErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsListUserUuidErrorComponent
        if not isinstance(v, ObservationsListUserUuidErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsListUserUuidErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsListOrderByErrorComponent
        if not isinstance(v, ObservationsListOrderByErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsListOrderByErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsListIdentificationTaxonErrorComponent
        if not isinstance(v, ObservationsListIdentificationTaxonErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsListIdentificationTaxonErrorComponent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ObservationsListError with oneOf schemas: ObservationsListCountryIdErrorComponent, ObservationsListCreatedAtErrorComponent, ObservationsListIdentificationTaxonErrorComponent, ObservationsListOrderByErrorComponent, ObservationsListReceivedAtErrorComponent, ObservationsListShortIdErrorComponent, ObservationsListUpdatedAtErrorComponent, ObservationsListUserUuidErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ObservationsListError with oneOf schemas: ObservationsListCountryIdErrorComponent, ObservationsListCreatedAtErrorComponent, ObservationsListIdentificationTaxonErrorComponent, ObservationsListOrderByErrorComponent, ObservationsListReceivedAtErrorComponent, ObservationsListShortIdErrorComponent, ObservationsListUpdatedAtErrorComponent, ObservationsListUserUuidErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ObservationsListShortIdErrorComponent
        try:
            instance.actual_instance = ObservationsListShortIdErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsListCreatedAtErrorComponent
        try:
            instance.actual_instance = ObservationsListCreatedAtErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsListReceivedAtErrorComponent
        try:
            instance.actual_instance = ObservationsListReceivedAtErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsListUpdatedAtErrorComponent
        try:
            instance.actual_instance = ObservationsListUpdatedAtErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsListCountryIdErrorComponent
        try:
            instance.actual_instance = ObservationsListCountryIdErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsListUserUuidErrorComponent
        try:
            instance.actual_instance = ObservationsListUserUuidErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsListOrderByErrorComponent
        try:
            instance.actual_instance = ObservationsListOrderByErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsListIdentificationTaxonErrorComponent
        try:
            instance.actual_instance = ObservationsListIdentificationTaxonErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ObservationsListError with oneOf schemas: ObservationsListCountryIdErrorComponent, ObservationsListCreatedAtErrorComponent, ObservationsListIdentificationTaxonErrorComponent, ObservationsListOrderByErrorComponent, ObservationsListReceivedAtErrorComponent, ObservationsListShortIdErrorComponent, ObservationsListUpdatedAtErrorComponent, ObservationsListUserUuidErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ObservationsListError with oneOf schemas: ObservationsListCountryIdErrorComponent, ObservationsListCreatedAtErrorComponent, ObservationsListIdentificationTaxonErrorComponent, ObservationsListOrderByErrorComponent, ObservationsListReceivedAtErrorComponent, ObservationsListShortIdErrorComponent, ObservationsListUpdatedAtErrorComponent, ObservationsListUserUuidErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ObservationsListCountryIdErrorComponent, ObservationsListCreatedAtErrorComponent, ObservationsListIdentificationTaxonErrorComponent, ObservationsListOrderByErrorComponent, ObservationsListReceivedAtErrorComponent, ObservationsListShortIdErrorComponent, ObservationsListUpdatedAtErrorComponent, ObservationsListUserUuidErrorComponent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


