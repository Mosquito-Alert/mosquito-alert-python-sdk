# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from mosquito_alert.models.identificationtasks_list_annotator_ids_error_component import IdentificationtasksListAnnotatorIdsErrorComponent
from mosquito_alert.models.identificationtasks_list_assignee_ids_error_component import IdentificationtasksListAssigneeIdsErrorComponent
from mosquito_alert.models.identificationtasks_list_created_at_error_component import IdentificationtasksListCreatedAtErrorComponent
from mosquito_alert.models.identificationtasks_list_num_annotations_error_component import IdentificationtasksListNumAnnotationsErrorComponent
from mosquito_alert.models.identificationtasks_list_observation_country_ids_error_component import IdentificationtasksListObservationCountryIdsErrorComponent
from mosquito_alert.models.identificationtasks_list_order_by_error_component import IdentificationtasksListOrderByErrorComponent
from mosquito_alert.models.identificationtasks_list_result_agreement_error_component import IdentificationtasksListResultAgreementErrorComponent
from mosquito_alert.models.identificationtasks_list_result_confidence_error_component import IdentificationtasksListResultConfidenceErrorComponent
from mosquito_alert.models.identificationtasks_list_result_source_error_component import IdentificationtasksListResultSourceErrorComponent
from mosquito_alert.models.identificationtasks_list_result_taxon_ids_error_component import IdentificationtasksListResultTaxonIdsErrorComponent
from mosquito_alert.models.identificationtasks_list_result_uncertainty_error_component import IdentificationtasksListResultUncertaintyErrorComponent
from mosquito_alert.models.identificationtasks_list_review_type_error_component import IdentificationtasksListReviewTypeErrorComponent
from mosquito_alert.models.identificationtasks_list_status_error_component import IdentificationtasksListStatusErrorComponent
from mosquito_alert.models.identificationtasks_list_updated_at_error_component import IdentificationtasksListUpdatedAtErrorComponent
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

IDENTIFICATIONTASKSLISTERROR_ONE_OF_SCHEMAS = ["IdentificationtasksListAnnotatorIdsErrorComponent", "IdentificationtasksListAssigneeIdsErrorComponent", "IdentificationtasksListCreatedAtErrorComponent", "IdentificationtasksListNumAnnotationsErrorComponent", "IdentificationtasksListObservationCountryIdsErrorComponent", "IdentificationtasksListOrderByErrorComponent", "IdentificationtasksListResultAgreementErrorComponent", "IdentificationtasksListResultConfidenceErrorComponent", "IdentificationtasksListResultSourceErrorComponent", "IdentificationtasksListResultTaxonIdsErrorComponent", "IdentificationtasksListResultUncertaintyErrorComponent", "IdentificationtasksListReviewTypeErrorComponent", "IdentificationtasksListStatusErrorComponent", "IdentificationtasksListUpdatedAtErrorComponent"]

class IdentificationtasksListError(BaseModel):
    """
    IdentificationtasksListError
    """
    # data type: IdentificationtasksListReviewTypeErrorComponent
    oneof_schema_1_validator: Optional[IdentificationtasksListReviewTypeErrorComponent] = None
    # data type: IdentificationtasksListAnnotatorIdsErrorComponent
    oneof_schema_2_validator: Optional[IdentificationtasksListAnnotatorIdsErrorComponent] = None
    # data type: IdentificationtasksListAssigneeIdsErrorComponent
    oneof_schema_3_validator: Optional[IdentificationtasksListAssigneeIdsErrorComponent] = None
    # data type: IdentificationtasksListNumAnnotationsErrorComponent
    oneof_schema_4_validator: Optional[IdentificationtasksListNumAnnotationsErrorComponent] = None
    # data type: IdentificationtasksListCreatedAtErrorComponent
    oneof_schema_5_validator: Optional[IdentificationtasksListCreatedAtErrorComponent] = None
    # data type: IdentificationtasksListUpdatedAtErrorComponent
    oneof_schema_6_validator: Optional[IdentificationtasksListUpdatedAtErrorComponent] = None
    # data type: IdentificationtasksListOrderByErrorComponent
    oneof_schema_7_validator: Optional[IdentificationtasksListOrderByErrorComponent] = None
    # data type: IdentificationtasksListStatusErrorComponent
    oneof_schema_8_validator: Optional[IdentificationtasksListStatusErrorComponent] = None
    # data type: IdentificationtasksListObservationCountryIdsErrorComponent
    oneof_schema_9_validator: Optional[IdentificationtasksListObservationCountryIdsErrorComponent] = None
    # data type: IdentificationtasksListResultTaxonIdsErrorComponent
    oneof_schema_10_validator: Optional[IdentificationtasksListResultTaxonIdsErrorComponent] = None
    # data type: IdentificationtasksListResultConfidenceErrorComponent
    oneof_schema_11_validator: Optional[IdentificationtasksListResultConfidenceErrorComponent] = None
    # data type: IdentificationtasksListResultUncertaintyErrorComponent
    oneof_schema_12_validator: Optional[IdentificationtasksListResultUncertaintyErrorComponent] = None
    # data type: IdentificationtasksListResultAgreementErrorComponent
    oneof_schema_13_validator: Optional[IdentificationtasksListResultAgreementErrorComponent] = None
    # data type: IdentificationtasksListResultSourceErrorComponent
    oneof_schema_14_validator: Optional[IdentificationtasksListResultSourceErrorComponent] = None
    actual_instance: Optional[Union[IdentificationtasksListAnnotatorIdsErrorComponent, IdentificationtasksListAssigneeIdsErrorComponent, IdentificationtasksListCreatedAtErrorComponent, IdentificationtasksListNumAnnotationsErrorComponent, IdentificationtasksListObservationCountryIdsErrorComponent, IdentificationtasksListOrderByErrorComponent, IdentificationtasksListResultAgreementErrorComponent, IdentificationtasksListResultConfidenceErrorComponent, IdentificationtasksListResultSourceErrorComponent, IdentificationtasksListResultTaxonIdsErrorComponent, IdentificationtasksListResultUncertaintyErrorComponent, IdentificationtasksListReviewTypeErrorComponent, IdentificationtasksListStatusErrorComponent, IdentificationtasksListUpdatedAtErrorComponent]] = None
    one_of_schemas: Set[str] = { "IdentificationtasksListAnnotatorIdsErrorComponent", "IdentificationtasksListAssigneeIdsErrorComponent", "IdentificationtasksListCreatedAtErrorComponent", "IdentificationtasksListNumAnnotationsErrorComponent", "IdentificationtasksListObservationCountryIdsErrorComponent", "IdentificationtasksListOrderByErrorComponent", "IdentificationtasksListResultAgreementErrorComponent", "IdentificationtasksListResultConfidenceErrorComponent", "IdentificationtasksListResultSourceErrorComponent", "IdentificationtasksListResultTaxonIdsErrorComponent", "IdentificationtasksListResultUncertaintyErrorComponent", "IdentificationtasksListReviewTypeErrorComponent", "IdentificationtasksListStatusErrorComponent", "IdentificationtasksListUpdatedAtErrorComponent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = IdentificationtasksListError.model_construct()
        error_messages = []
        match = 0
        # validate data type: IdentificationtasksListReviewTypeErrorComponent
        if not isinstance(v, IdentificationtasksListReviewTypeErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListReviewTypeErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListAnnotatorIdsErrorComponent
        if not isinstance(v, IdentificationtasksListAnnotatorIdsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListAnnotatorIdsErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListAssigneeIdsErrorComponent
        if not isinstance(v, IdentificationtasksListAssigneeIdsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListAssigneeIdsErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListNumAnnotationsErrorComponent
        if not isinstance(v, IdentificationtasksListNumAnnotationsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListNumAnnotationsErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListCreatedAtErrorComponent
        if not isinstance(v, IdentificationtasksListCreatedAtErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListCreatedAtErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListUpdatedAtErrorComponent
        if not isinstance(v, IdentificationtasksListUpdatedAtErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListUpdatedAtErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListOrderByErrorComponent
        if not isinstance(v, IdentificationtasksListOrderByErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListOrderByErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListStatusErrorComponent
        if not isinstance(v, IdentificationtasksListStatusErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListStatusErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListObservationCountryIdsErrorComponent
        if not isinstance(v, IdentificationtasksListObservationCountryIdsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListObservationCountryIdsErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListResultTaxonIdsErrorComponent
        if not isinstance(v, IdentificationtasksListResultTaxonIdsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListResultTaxonIdsErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListResultConfidenceErrorComponent
        if not isinstance(v, IdentificationtasksListResultConfidenceErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListResultConfidenceErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListResultUncertaintyErrorComponent
        if not isinstance(v, IdentificationtasksListResultUncertaintyErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListResultUncertaintyErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListResultAgreementErrorComponent
        if not isinstance(v, IdentificationtasksListResultAgreementErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListResultAgreementErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListResultSourceErrorComponent
        if not isinstance(v, IdentificationtasksListResultSourceErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListResultSourceErrorComponent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in IdentificationtasksListError with oneOf schemas: IdentificationtasksListAnnotatorIdsErrorComponent, IdentificationtasksListAssigneeIdsErrorComponent, IdentificationtasksListCreatedAtErrorComponent, IdentificationtasksListNumAnnotationsErrorComponent, IdentificationtasksListObservationCountryIdsErrorComponent, IdentificationtasksListOrderByErrorComponent, IdentificationtasksListResultAgreementErrorComponent, IdentificationtasksListResultConfidenceErrorComponent, IdentificationtasksListResultSourceErrorComponent, IdentificationtasksListResultTaxonIdsErrorComponent, IdentificationtasksListResultUncertaintyErrorComponent, IdentificationtasksListReviewTypeErrorComponent, IdentificationtasksListStatusErrorComponent, IdentificationtasksListUpdatedAtErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in IdentificationtasksListError with oneOf schemas: IdentificationtasksListAnnotatorIdsErrorComponent, IdentificationtasksListAssigneeIdsErrorComponent, IdentificationtasksListCreatedAtErrorComponent, IdentificationtasksListNumAnnotationsErrorComponent, IdentificationtasksListObservationCountryIdsErrorComponent, IdentificationtasksListOrderByErrorComponent, IdentificationtasksListResultAgreementErrorComponent, IdentificationtasksListResultConfidenceErrorComponent, IdentificationtasksListResultSourceErrorComponent, IdentificationtasksListResultTaxonIdsErrorComponent, IdentificationtasksListResultUncertaintyErrorComponent, IdentificationtasksListReviewTypeErrorComponent, IdentificationtasksListStatusErrorComponent, IdentificationtasksListUpdatedAtErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into IdentificationtasksListReviewTypeErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListReviewTypeErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListAnnotatorIdsErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListAnnotatorIdsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListAssigneeIdsErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListAssigneeIdsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListNumAnnotationsErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListNumAnnotationsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListCreatedAtErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListCreatedAtErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListUpdatedAtErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListUpdatedAtErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListOrderByErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListOrderByErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListStatusErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListStatusErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListObservationCountryIdsErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListObservationCountryIdsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListResultTaxonIdsErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListResultTaxonIdsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListResultConfidenceErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListResultConfidenceErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListResultUncertaintyErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListResultUncertaintyErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListResultAgreementErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListResultAgreementErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListResultSourceErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListResultSourceErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into IdentificationtasksListError with oneOf schemas: IdentificationtasksListAnnotatorIdsErrorComponent, IdentificationtasksListAssigneeIdsErrorComponent, IdentificationtasksListCreatedAtErrorComponent, IdentificationtasksListNumAnnotationsErrorComponent, IdentificationtasksListObservationCountryIdsErrorComponent, IdentificationtasksListOrderByErrorComponent, IdentificationtasksListResultAgreementErrorComponent, IdentificationtasksListResultConfidenceErrorComponent, IdentificationtasksListResultSourceErrorComponent, IdentificationtasksListResultTaxonIdsErrorComponent, IdentificationtasksListResultUncertaintyErrorComponent, IdentificationtasksListReviewTypeErrorComponent, IdentificationtasksListStatusErrorComponent, IdentificationtasksListUpdatedAtErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into IdentificationtasksListError with oneOf schemas: IdentificationtasksListAnnotatorIdsErrorComponent, IdentificationtasksListAssigneeIdsErrorComponent, IdentificationtasksListCreatedAtErrorComponent, IdentificationtasksListNumAnnotationsErrorComponent, IdentificationtasksListObservationCountryIdsErrorComponent, IdentificationtasksListOrderByErrorComponent, IdentificationtasksListResultAgreementErrorComponent, IdentificationtasksListResultConfidenceErrorComponent, IdentificationtasksListResultSourceErrorComponent, IdentificationtasksListResultTaxonIdsErrorComponent, IdentificationtasksListResultUncertaintyErrorComponent, IdentificationtasksListReviewTypeErrorComponent, IdentificationtasksListStatusErrorComponent, IdentificationtasksListUpdatedAtErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], IdentificationtasksListAnnotatorIdsErrorComponent, IdentificationtasksListAssigneeIdsErrorComponent, IdentificationtasksListCreatedAtErrorComponent, IdentificationtasksListNumAnnotationsErrorComponent, IdentificationtasksListObservationCountryIdsErrorComponent, IdentificationtasksListOrderByErrorComponent, IdentificationtasksListResultAgreementErrorComponent, IdentificationtasksListResultConfidenceErrorComponent, IdentificationtasksListResultSourceErrorComponent, IdentificationtasksListResultTaxonIdsErrorComponent, IdentificationtasksListResultUncertaintyErrorComponent, IdentificationtasksListReviewTypeErrorComponent, IdentificationtasksListStatusErrorComponent, IdentificationtasksListUpdatedAtErrorComponent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


