# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TaxonTreeNode(BaseModel):
    """
    TaxonTreeNode
    """ # noqa: E501
    id: StrictInt
    name: Annotated[str, Field(strict=True, max_length=32)]
    common_name: Optional[Annotated[str, Field(strict=True, max_length=64)]] = None
    rank: StrictStr
    italicize: StrictBool = Field(description="Display the name in italics when rendering.")
    is_relevant: StrictBool = Field(description="Indicates if this taxon is relevant for the application. Will be shown first and will set task to conflict if final taxon is not this.")
    children: List[TaxonTreeNode]
    __properties: ClassVar[List[str]] = ["id", "name", "common_name", "rank", "italicize", "is_relevant", "children"]

    @field_validator('rank')
    def rank_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['class', 'order', 'family', 'genus', 'subgenus', 'species_complex', 'species']):
            raise ValueError("must be one of enum values ('class', 'order', 'family', 'genus', 'subgenus', 'species_complex', 'species')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaxonTreeNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "italicize",
            "children",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict['children'] = _items
        # set to None if common_name (nullable) is None
        # and model_fields_set contains the field
        if self.common_name is None and "common_name" in self.model_fields_set:
            _dict['common_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaxonTreeNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "common_name": obj.get("common_name"),
            "rank": obj.get("rank"),
            "italicize": obj.get("italicize"),
            "is_relevant": obj.get("is_relevant"),
            "children": [TaxonTreeNode.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
TaxonTreeNode.model_rebuild(raise_errors=False)

