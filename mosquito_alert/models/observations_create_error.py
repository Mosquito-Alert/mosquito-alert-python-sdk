# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from mosquito_alert.models.observations_create_created_at_error_component import ObservationsCreateCreatedAtErrorComponent
from mosquito_alert.models.observations_create_event_environment_error_component import ObservationsCreateEventEnvironmentErrorComponent
from mosquito_alert.models.observations_create_event_moment_error_component import ObservationsCreateEventMomentErrorComponent
from mosquito_alert.models.observations_create_location_non_field_errors_error_component import ObservationsCreateLocationNonFieldErrorsErrorComponent
from mosquito_alert.models.observations_create_location_point_error_component import ObservationsCreateLocationPointErrorComponent
from mosquito_alert.models.observations_create_location_source_error_component import ObservationsCreateLocationSourceErrorComponent
from mosquito_alert.models.observations_create_mosquito_appearance_abdomen_error_component import ObservationsCreateMosquitoAppearanceAbdomenErrorComponent
from mosquito_alert.models.observations_create_mosquito_appearance_legs_error_component import ObservationsCreateMosquitoAppearanceLegsErrorComponent
from mosquito_alert.models.observations_create_mosquito_appearance_non_field_errors_error_component import ObservationsCreateMosquitoAppearanceNonFieldErrorsErrorComponent
from mosquito_alert.models.observations_create_mosquito_appearance_specie_error_component import ObservationsCreateMosquitoAppearanceSpecieErrorComponent
from mosquito_alert.models.observations_create_mosquito_appearance_thorax_error_component import ObservationsCreateMosquitoAppearanceThoraxErrorComponent
from mosquito_alert.models.observations_create_non_field_errors_error_component import ObservationsCreateNonFieldErrorsErrorComponent
from mosquito_alert.models.observations_create_note_error_component import ObservationsCreateNoteErrorComponent
from mosquito_alert.models.observations_create_photos_index_file_error_component import ObservationsCreatePhotosINDEXFileErrorComponent
from mosquito_alert.models.observations_create_photos_index_non_field_errors_error_component import ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent
from mosquito_alert.models.observations_create_photos_non_field_errors_error_component import ObservationsCreatePhotosNonFieldErrorsErrorComponent
from mosquito_alert.models.observations_create_sent_at_error_component import ObservationsCreateSentAtErrorComponent
from mosquito_alert.models.observations_create_tags_error_component import ObservationsCreateTagsErrorComponent
from mosquito_alert.models.observations_create_tags_index_error_component import ObservationsCreateTagsINDEXErrorComponent
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

OBSERVATIONSCREATEERROR_ONE_OF_SCHEMAS = ["ObservationsCreateCreatedAtErrorComponent", "ObservationsCreateEventEnvironmentErrorComponent", "ObservationsCreateEventMomentErrorComponent", "ObservationsCreateLocationNonFieldErrorsErrorComponent", "ObservationsCreateLocationPointErrorComponent", "ObservationsCreateLocationSourceErrorComponent", "ObservationsCreateMosquitoAppearanceAbdomenErrorComponent", "ObservationsCreateMosquitoAppearanceLegsErrorComponent", "ObservationsCreateMosquitoAppearanceNonFieldErrorsErrorComponent", "ObservationsCreateMosquitoAppearanceSpecieErrorComponent", "ObservationsCreateMosquitoAppearanceThoraxErrorComponent", "ObservationsCreateNonFieldErrorsErrorComponent", "ObservationsCreateNoteErrorComponent", "ObservationsCreatePhotosINDEXFileErrorComponent", "ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent", "ObservationsCreatePhotosNonFieldErrorsErrorComponent", "ObservationsCreateSentAtErrorComponent", "ObservationsCreateTagsErrorComponent", "ObservationsCreateTagsINDEXErrorComponent"]

class ObservationsCreateError(BaseModel):
    """
    ObservationsCreateError
    """
    # data type: ObservationsCreateNonFieldErrorsErrorComponent
    oneof_schema_1_validator: Optional[ObservationsCreateNonFieldErrorsErrorComponent] = None
    # data type: ObservationsCreateCreatedAtErrorComponent
    oneof_schema_2_validator: Optional[ObservationsCreateCreatedAtErrorComponent] = None
    # data type: ObservationsCreateSentAtErrorComponent
    oneof_schema_3_validator: Optional[ObservationsCreateSentAtErrorComponent] = None
    # data type: ObservationsCreateLocationNonFieldErrorsErrorComponent
    oneof_schema_4_validator: Optional[ObservationsCreateLocationNonFieldErrorsErrorComponent] = None
    # data type: ObservationsCreateLocationSourceErrorComponent
    oneof_schema_5_validator: Optional[ObservationsCreateLocationSourceErrorComponent] = None
    # data type: ObservationsCreateLocationPointErrorComponent
    oneof_schema_6_validator: Optional[ObservationsCreateLocationPointErrorComponent] = None
    # data type: ObservationsCreateNoteErrorComponent
    oneof_schema_7_validator: Optional[ObservationsCreateNoteErrorComponent] = None
    # data type: ObservationsCreateTagsErrorComponent
    oneof_schema_8_validator: Optional[ObservationsCreateTagsErrorComponent] = None
    # data type: ObservationsCreateTagsINDEXErrorComponent
    oneof_schema_9_validator: Optional[ObservationsCreateTagsINDEXErrorComponent] = None
    # data type: ObservationsCreatePhotosNonFieldErrorsErrorComponent
    oneof_schema_10_validator: Optional[ObservationsCreatePhotosNonFieldErrorsErrorComponent] = None
    # data type: ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent
    oneof_schema_11_validator: Optional[ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent] = None
    # data type: ObservationsCreatePhotosINDEXFileErrorComponent
    oneof_schema_12_validator: Optional[ObservationsCreatePhotosINDEXFileErrorComponent] = None
    # data type: ObservationsCreateEventEnvironmentErrorComponent
    oneof_schema_13_validator: Optional[ObservationsCreateEventEnvironmentErrorComponent] = None
    # data type: ObservationsCreateEventMomentErrorComponent
    oneof_schema_14_validator: Optional[ObservationsCreateEventMomentErrorComponent] = None
    # data type: ObservationsCreateMosquitoAppearanceNonFieldErrorsErrorComponent
    oneof_schema_15_validator: Optional[ObservationsCreateMosquitoAppearanceNonFieldErrorsErrorComponent] = None
    # data type: ObservationsCreateMosquitoAppearanceSpecieErrorComponent
    oneof_schema_16_validator: Optional[ObservationsCreateMosquitoAppearanceSpecieErrorComponent] = None
    # data type: ObservationsCreateMosquitoAppearanceThoraxErrorComponent
    oneof_schema_17_validator: Optional[ObservationsCreateMosquitoAppearanceThoraxErrorComponent] = None
    # data type: ObservationsCreateMosquitoAppearanceAbdomenErrorComponent
    oneof_schema_18_validator: Optional[ObservationsCreateMosquitoAppearanceAbdomenErrorComponent] = None
    # data type: ObservationsCreateMosquitoAppearanceLegsErrorComponent
    oneof_schema_19_validator: Optional[ObservationsCreateMosquitoAppearanceLegsErrorComponent] = None
    actual_instance: Optional[Union[ObservationsCreateCreatedAtErrorComponent, ObservationsCreateEventEnvironmentErrorComponent, ObservationsCreateEventMomentErrorComponent, ObservationsCreateLocationNonFieldErrorsErrorComponent, ObservationsCreateLocationPointErrorComponent, ObservationsCreateLocationSourceErrorComponent, ObservationsCreateMosquitoAppearanceAbdomenErrorComponent, ObservationsCreateMosquitoAppearanceLegsErrorComponent, ObservationsCreateMosquitoAppearanceNonFieldErrorsErrorComponent, ObservationsCreateMosquitoAppearanceSpecieErrorComponent, ObservationsCreateMosquitoAppearanceThoraxErrorComponent, ObservationsCreateNonFieldErrorsErrorComponent, ObservationsCreateNoteErrorComponent, ObservationsCreatePhotosINDEXFileErrorComponent, ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent, ObservationsCreatePhotosNonFieldErrorsErrorComponent, ObservationsCreateSentAtErrorComponent, ObservationsCreateTagsErrorComponent, ObservationsCreateTagsINDEXErrorComponent]] = None
    one_of_schemas: Set[str] = { "ObservationsCreateCreatedAtErrorComponent", "ObservationsCreateEventEnvironmentErrorComponent", "ObservationsCreateEventMomentErrorComponent", "ObservationsCreateLocationNonFieldErrorsErrorComponent", "ObservationsCreateLocationPointErrorComponent", "ObservationsCreateLocationSourceErrorComponent", "ObservationsCreateMosquitoAppearanceAbdomenErrorComponent", "ObservationsCreateMosquitoAppearanceLegsErrorComponent", "ObservationsCreateMosquitoAppearanceNonFieldErrorsErrorComponent", "ObservationsCreateMosquitoAppearanceSpecieErrorComponent", "ObservationsCreateMosquitoAppearanceThoraxErrorComponent", "ObservationsCreateNonFieldErrorsErrorComponent", "ObservationsCreateNoteErrorComponent", "ObservationsCreatePhotosINDEXFileErrorComponent", "ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent", "ObservationsCreatePhotosNonFieldErrorsErrorComponent", "ObservationsCreateSentAtErrorComponent", "ObservationsCreateTagsErrorComponent", "ObservationsCreateTagsINDEXErrorComponent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ObservationsCreateError.model_construct()
        error_messages = []
        match = 0
        # validate data type: ObservationsCreateNonFieldErrorsErrorComponent
        if not isinstance(v, ObservationsCreateNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreateNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreateCreatedAtErrorComponent
        if not isinstance(v, ObservationsCreateCreatedAtErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreateCreatedAtErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreateSentAtErrorComponent
        if not isinstance(v, ObservationsCreateSentAtErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreateSentAtErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreateLocationNonFieldErrorsErrorComponent
        if not isinstance(v, ObservationsCreateLocationNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreateLocationNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreateLocationSourceErrorComponent
        if not isinstance(v, ObservationsCreateLocationSourceErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreateLocationSourceErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreateLocationPointErrorComponent
        if not isinstance(v, ObservationsCreateLocationPointErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreateLocationPointErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreateNoteErrorComponent
        if not isinstance(v, ObservationsCreateNoteErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreateNoteErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreateTagsErrorComponent
        if not isinstance(v, ObservationsCreateTagsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreateTagsErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreateTagsINDEXErrorComponent
        if not isinstance(v, ObservationsCreateTagsINDEXErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreateTagsINDEXErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreatePhotosNonFieldErrorsErrorComponent
        if not isinstance(v, ObservationsCreatePhotosNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreatePhotosNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent
        if not isinstance(v, ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreatePhotosINDEXFileErrorComponent
        if not isinstance(v, ObservationsCreatePhotosINDEXFileErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreatePhotosINDEXFileErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreateEventEnvironmentErrorComponent
        if not isinstance(v, ObservationsCreateEventEnvironmentErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreateEventEnvironmentErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreateEventMomentErrorComponent
        if not isinstance(v, ObservationsCreateEventMomentErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreateEventMomentErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreateMosquitoAppearanceNonFieldErrorsErrorComponent
        if not isinstance(v, ObservationsCreateMosquitoAppearanceNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreateMosquitoAppearanceNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreateMosquitoAppearanceSpecieErrorComponent
        if not isinstance(v, ObservationsCreateMosquitoAppearanceSpecieErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreateMosquitoAppearanceSpecieErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreateMosquitoAppearanceThoraxErrorComponent
        if not isinstance(v, ObservationsCreateMosquitoAppearanceThoraxErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreateMosquitoAppearanceThoraxErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreateMosquitoAppearanceAbdomenErrorComponent
        if not isinstance(v, ObservationsCreateMosquitoAppearanceAbdomenErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreateMosquitoAppearanceAbdomenErrorComponent`")
        else:
            match += 1
        # validate data type: ObservationsCreateMosquitoAppearanceLegsErrorComponent
        if not isinstance(v, ObservationsCreateMosquitoAppearanceLegsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObservationsCreateMosquitoAppearanceLegsErrorComponent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ObservationsCreateError with oneOf schemas: ObservationsCreateCreatedAtErrorComponent, ObservationsCreateEventEnvironmentErrorComponent, ObservationsCreateEventMomentErrorComponent, ObservationsCreateLocationNonFieldErrorsErrorComponent, ObservationsCreateLocationPointErrorComponent, ObservationsCreateLocationSourceErrorComponent, ObservationsCreateMosquitoAppearanceAbdomenErrorComponent, ObservationsCreateMosquitoAppearanceLegsErrorComponent, ObservationsCreateMosquitoAppearanceNonFieldErrorsErrorComponent, ObservationsCreateMosquitoAppearanceSpecieErrorComponent, ObservationsCreateMosquitoAppearanceThoraxErrorComponent, ObservationsCreateNonFieldErrorsErrorComponent, ObservationsCreateNoteErrorComponent, ObservationsCreatePhotosINDEXFileErrorComponent, ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent, ObservationsCreatePhotosNonFieldErrorsErrorComponent, ObservationsCreateSentAtErrorComponent, ObservationsCreateTagsErrorComponent, ObservationsCreateTagsINDEXErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ObservationsCreateError with oneOf schemas: ObservationsCreateCreatedAtErrorComponent, ObservationsCreateEventEnvironmentErrorComponent, ObservationsCreateEventMomentErrorComponent, ObservationsCreateLocationNonFieldErrorsErrorComponent, ObservationsCreateLocationPointErrorComponent, ObservationsCreateLocationSourceErrorComponent, ObservationsCreateMosquitoAppearanceAbdomenErrorComponent, ObservationsCreateMosquitoAppearanceLegsErrorComponent, ObservationsCreateMosquitoAppearanceNonFieldErrorsErrorComponent, ObservationsCreateMosquitoAppearanceSpecieErrorComponent, ObservationsCreateMosquitoAppearanceThoraxErrorComponent, ObservationsCreateNonFieldErrorsErrorComponent, ObservationsCreateNoteErrorComponent, ObservationsCreatePhotosINDEXFileErrorComponent, ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent, ObservationsCreatePhotosNonFieldErrorsErrorComponent, ObservationsCreateSentAtErrorComponent, ObservationsCreateTagsErrorComponent, ObservationsCreateTagsINDEXErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ObservationsCreateNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = ObservationsCreateNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreateCreatedAtErrorComponent
        try:
            instance.actual_instance = ObservationsCreateCreatedAtErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreateSentAtErrorComponent
        try:
            instance.actual_instance = ObservationsCreateSentAtErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreateLocationNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = ObservationsCreateLocationNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreateLocationSourceErrorComponent
        try:
            instance.actual_instance = ObservationsCreateLocationSourceErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreateLocationPointErrorComponent
        try:
            instance.actual_instance = ObservationsCreateLocationPointErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreateNoteErrorComponent
        try:
            instance.actual_instance = ObservationsCreateNoteErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreateTagsErrorComponent
        try:
            instance.actual_instance = ObservationsCreateTagsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreateTagsINDEXErrorComponent
        try:
            instance.actual_instance = ObservationsCreateTagsINDEXErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreatePhotosNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = ObservationsCreatePhotosNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreatePhotosINDEXFileErrorComponent
        try:
            instance.actual_instance = ObservationsCreatePhotosINDEXFileErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreateEventEnvironmentErrorComponent
        try:
            instance.actual_instance = ObservationsCreateEventEnvironmentErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreateEventMomentErrorComponent
        try:
            instance.actual_instance = ObservationsCreateEventMomentErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreateMosquitoAppearanceNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = ObservationsCreateMosquitoAppearanceNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreateMosquitoAppearanceSpecieErrorComponent
        try:
            instance.actual_instance = ObservationsCreateMosquitoAppearanceSpecieErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreateMosquitoAppearanceThoraxErrorComponent
        try:
            instance.actual_instance = ObservationsCreateMosquitoAppearanceThoraxErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreateMosquitoAppearanceAbdomenErrorComponent
        try:
            instance.actual_instance = ObservationsCreateMosquitoAppearanceAbdomenErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObservationsCreateMosquitoAppearanceLegsErrorComponent
        try:
            instance.actual_instance = ObservationsCreateMosquitoAppearanceLegsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ObservationsCreateError with oneOf schemas: ObservationsCreateCreatedAtErrorComponent, ObservationsCreateEventEnvironmentErrorComponent, ObservationsCreateEventMomentErrorComponent, ObservationsCreateLocationNonFieldErrorsErrorComponent, ObservationsCreateLocationPointErrorComponent, ObservationsCreateLocationSourceErrorComponent, ObservationsCreateMosquitoAppearanceAbdomenErrorComponent, ObservationsCreateMosquitoAppearanceLegsErrorComponent, ObservationsCreateMosquitoAppearanceNonFieldErrorsErrorComponent, ObservationsCreateMosquitoAppearanceSpecieErrorComponent, ObservationsCreateMosquitoAppearanceThoraxErrorComponent, ObservationsCreateNonFieldErrorsErrorComponent, ObservationsCreateNoteErrorComponent, ObservationsCreatePhotosINDEXFileErrorComponent, ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent, ObservationsCreatePhotosNonFieldErrorsErrorComponent, ObservationsCreateSentAtErrorComponent, ObservationsCreateTagsErrorComponent, ObservationsCreateTagsINDEXErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ObservationsCreateError with oneOf schemas: ObservationsCreateCreatedAtErrorComponent, ObservationsCreateEventEnvironmentErrorComponent, ObservationsCreateEventMomentErrorComponent, ObservationsCreateLocationNonFieldErrorsErrorComponent, ObservationsCreateLocationPointErrorComponent, ObservationsCreateLocationSourceErrorComponent, ObservationsCreateMosquitoAppearanceAbdomenErrorComponent, ObservationsCreateMosquitoAppearanceLegsErrorComponent, ObservationsCreateMosquitoAppearanceNonFieldErrorsErrorComponent, ObservationsCreateMosquitoAppearanceSpecieErrorComponent, ObservationsCreateMosquitoAppearanceThoraxErrorComponent, ObservationsCreateNonFieldErrorsErrorComponent, ObservationsCreateNoteErrorComponent, ObservationsCreatePhotosINDEXFileErrorComponent, ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent, ObservationsCreatePhotosNonFieldErrorsErrorComponent, ObservationsCreateSentAtErrorComponent, ObservationsCreateTagsErrorComponent, ObservationsCreateTagsINDEXErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ObservationsCreateCreatedAtErrorComponent, ObservationsCreateEventEnvironmentErrorComponent, ObservationsCreateEventMomentErrorComponent, ObservationsCreateLocationNonFieldErrorsErrorComponent, ObservationsCreateLocationPointErrorComponent, ObservationsCreateLocationSourceErrorComponent, ObservationsCreateMosquitoAppearanceAbdomenErrorComponent, ObservationsCreateMosquitoAppearanceLegsErrorComponent, ObservationsCreateMosquitoAppearanceNonFieldErrorsErrorComponent, ObservationsCreateMosquitoAppearanceSpecieErrorComponent, ObservationsCreateMosquitoAppearanceThoraxErrorComponent, ObservationsCreateNonFieldErrorsErrorComponent, ObservationsCreateNoteErrorComponent, ObservationsCreatePhotosINDEXFileErrorComponent, ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent, ObservationsCreatePhotosNonFieldErrorsErrorComponent, ObservationsCreateSentAtErrorComponent, ObservationsCreateTagsErrorComponent, ObservationsCreateTagsINDEXErrorComponent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


