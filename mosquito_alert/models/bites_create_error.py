# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from mosquito_alert.models.bites_create_chest_bite_count_error_component import BitesCreateChestBiteCountErrorComponent
from mosquito_alert.models.bites_create_created_at_error_component import BitesCreateCreatedAtErrorComponent
from mosquito_alert.models.bites_create_event_environment_error_component import BitesCreateEventEnvironmentErrorComponent
from mosquito_alert.models.bites_create_event_moment_error_component import BitesCreateEventMomentErrorComponent
from mosquito_alert.models.bites_create_head_bite_count_error_component import BitesCreateHeadBiteCountErrorComponent
from mosquito_alert.models.bites_create_left_arm_bite_count_error_component import BitesCreateLeftArmBiteCountErrorComponent
from mosquito_alert.models.bites_create_left_leg_bite_count_error_component import BitesCreateLeftLegBiteCountErrorComponent
from mosquito_alert.models.bites_create_location_non_field_errors_error_component import BitesCreateLocationNonFieldErrorsErrorComponent
from mosquito_alert.models.bites_create_location_point_error_component import BitesCreateLocationPointErrorComponent
from mosquito_alert.models.bites_create_location_type_error_component import BitesCreateLocationTypeErrorComponent
from mosquito_alert.models.bites_create_non_field_errors_error_component import BitesCreateNonFieldErrorsErrorComponent
from mosquito_alert.models.bites_create_note_error_component import BitesCreateNoteErrorComponent
from mosquito_alert.models.bites_create_right_arm_bite_count_error_component import BitesCreateRightArmBiteCountErrorComponent
from mosquito_alert.models.bites_create_right_leg_bite_count_error_component import BitesCreateRightLegBiteCountErrorComponent
from mosquito_alert.models.bites_create_sent_at_error_component import BitesCreateSentAtErrorComponent
from mosquito_alert.models.bites_create_tags_error_component import BitesCreateTagsErrorComponent
from mosquito_alert.models.bites_create_tags_index_error_component import BitesCreateTagsINDEXErrorComponent
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

BITESCREATEERROR_ONE_OF_SCHEMAS = ["BitesCreateChestBiteCountErrorComponent", "BitesCreateCreatedAtErrorComponent", "BitesCreateEventEnvironmentErrorComponent", "BitesCreateEventMomentErrorComponent", "BitesCreateHeadBiteCountErrorComponent", "BitesCreateLeftArmBiteCountErrorComponent", "BitesCreateLeftLegBiteCountErrorComponent", "BitesCreateLocationNonFieldErrorsErrorComponent", "BitesCreateLocationPointErrorComponent", "BitesCreateLocationTypeErrorComponent", "BitesCreateNonFieldErrorsErrorComponent", "BitesCreateNoteErrorComponent", "BitesCreateRightArmBiteCountErrorComponent", "BitesCreateRightLegBiteCountErrorComponent", "BitesCreateSentAtErrorComponent", "BitesCreateTagsErrorComponent", "BitesCreateTagsINDEXErrorComponent"]

class BitesCreateError(BaseModel):
    """
    BitesCreateError
    """
    # data type: BitesCreateNonFieldErrorsErrorComponent
    oneof_schema_1_validator: Optional[BitesCreateNonFieldErrorsErrorComponent] = None
    # data type: BitesCreateCreatedAtErrorComponent
    oneof_schema_2_validator: Optional[BitesCreateCreatedAtErrorComponent] = None
    # data type: BitesCreateSentAtErrorComponent
    oneof_schema_3_validator: Optional[BitesCreateSentAtErrorComponent] = None
    # data type: BitesCreateLocationNonFieldErrorsErrorComponent
    oneof_schema_4_validator: Optional[BitesCreateLocationNonFieldErrorsErrorComponent] = None
    # data type: BitesCreateLocationTypeErrorComponent
    oneof_schema_5_validator: Optional[BitesCreateLocationTypeErrorComponent] = None
    # data type: BitesCreateLocationPointErrorComponent
    oneof_schema_6_validator: Optional[BitesCreateLocationPointErrorComponent] = None
    # data type: BitesCreateNoteErrorComponent
    oneof_schema_7_validator: Optional[BitesCreateNoteErrorComponent] = None
    # data type: BitesCreateTagsErrorComponent
    oneof_schema_8_validator: Optional[BitesCreateTagsErrorComponent] = None
    # data type: BitesCreateTagsINDEXErrorComponent
    oneof_schema_9_validator: Optional[BitesCreateTagsINDEXErrorComponent] = None
    # data type: BitesCreateEventEnvironmentErrorComponent
    oneof_schema_10_validator: Optional[BitesCreateEventEnvironmentErrorComponent] = None
    # data type: BitesCreateEventMomentErrorComponent
    oneof_schema_11_validator: Optional[BitesCreateEventMomentErrorComponent] = None
    # data type: BitesCreateHeadBiteCountErrorComponent
    oneof_schema_12_validator: Optional[BitesCreateHeadBiteCountErrorComponent] = None
    # data type: BitesCreateLeftArmBiteCountErrorComponent
    oneof_schema_13_validator: Optional[BitesCreateLeftArmBiteCountErrorComponent] = None
    # data type: BitesCreateRightArmBiteCountErrorComponent
    oneof_schema_14_validator: Optional[BitesCreateRightArmBiteCountErrorComponent] = None
    # data type: BitesCreateChestBiteCountErrorComponent
    oneof_schema_15_validator: Optional[BitesCreateChestBiteCountErrorComponent] = None
    # data type: BitesCreateLeftLegBiteCountErrorComponent
    oneof_schema_16_validator: Optional[BitesCreateLeftLegBiteCountErrorComponent] = None
    # data type: BitesCreateRightLegBiteCountErrorComponent
    oneof_schema_17_validator: Optional[BitesCreateRightLegBiteCountErrorComponent] = None
    actual_instance: Optional[Union[BitesCreateChestBiteCountErrorComponent, BitesCreateCreatedAtErrorComponent, BitesCreateEventEnvironmentErrorComponent, BitesCreateEventMomentErrorComponent, BitesCreateHeadBiteCountErrorComponent, BitesCreateLeftArmBiteCountErrorComponent, BitesCreateLeftLegBiteCountErrorComponent, BitesCreateLocationNonFieldErrorsErrorComponent, BitesCreateLocationPointErrorComponent, BitesCreateLocationTypeErrorComponent, BitesCreateNonFieldErrorsErrorComponent, BitesCreateNoteErrorComponent, BitesCreateRightArmBiteCountErrorComponent, BitesCreateRightLegBiteCountErrorComponent, BitesCreateSentAtErrorComponent, BitesCreateTagsErrorComponent, BitesCreateTagsINDEXErrorComponent]] = None
    one_of_schemas: Set[str] = { "BitesCreateChestBiteCountErrorComponent", "BitesCreateCreatedAtErrorComponent", "BitesCreateEventEnvironmentErrorComponent", "BitesCreateEventMomentErrorComponent", "BitesCreateHeadBiteCountErrorComponent", "BitesCreateLeftArmBiteCountErrorComponent", "BitesCreateLeftLegBiteCountErrorComponent", "BitesCreateLocationNonFieldErrorsErrorComponent", "BitesCreateLocationPointErrorComponent", "BitesCreateLocationTypeErrorComponent", "BitesCreateNonFieldErrorsErrorComponent", "BitesCreateNoteErrorComponent", "BitesCreateRightArmBiteCountErrorComponent", "BitesCreateRightLegBiteCountErrorComponent", "BitesCreateSentAtErrorComponent", "BitesCreateTagsErrorComponent", "BitesCreateTagsINDEXErrorComponent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = BitesCreateError.model_construct()
        error_messages = []
        match = 0
        # validate data type: BitesCreateNonFieldErrorsErrorComponent
        if not isinstance(v, BitesCreateNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: BitesCreateCreatedAtErrorComponent
        if not isinstance(v, BitesCreateCreatedAtErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateCreatedAtErrorComponent`")
        else:
            match += 1
        # validate data type: BitesCreateSentAtErrorComponent
        if not isinstance(v, BitesCreateSentAtErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateSentAtErrorComponent`")
        else:
            match += 1
        # validate data type: BitesCreateLocationNonFieldErrorsErrorComponent
        if not isinstance(v, BitesCreateLocationNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateLocationNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: BitesCreateLocationTypeErrorComponent
        if not isinstance(v, BitesCreateLocationTypeErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateLocationTypeErrorComponent`")
        else:
            match += 1
        # validate data type: BitesCreateLocationPointErrorComponent
        if not isinstance(v, BitesCreateLocationPointErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateLocationPointErrorComponent`")
        else:
            match += 1
        # validate data type: BitesCreateNoteErrorComponent
        if not isinstance(v, BitesCreateNoteErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateNoteErrorComponent`")
        else:
            match += 1
        # validate data type: BitesCreateTagsErrorComponent
        if not isinstance(v, BitesCreateTagsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateTagsErrorComponent`")
        else:
            match += 1
        # validate data type: BitesCreateTagsINDEXErrorComponent
        if not isinstance(v, BitesCreateTagsINDEXErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateTagsINDEXErrorComponent`")
        else:
            match += 1
        # validate data type: BitesCreateEventEnvironmentErrorComponent
        if not isinstance(v, BitesCreateEventEnvironmentErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateEventEnvironmentErrorComponent`")
        else:
            match += 1
        # validate data type: BitesCreateEventMomentErrorComponent
        if not isinstance(v, BitesCreateEventMomentErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateEventMomentErrorComponent`")
        else:
            match += 1
        # validate data type: BitesCreateHeadBiteCountErrorComponent
        if not isinstance(v, BitesCreateHeadBiteCountErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateHeadBiteCountErrorComponent`")
        else:
            match += 1
        # validate data type: BitesCreateLeftArmBiteCountErrorComponent
        if not isinstance(v, BitesCreateLeftArmBiteCountErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateLeftArmBiteCountErrorComponent`")
        else:
            match += 1
        # validate data type: BitesCreateRightArmBiteCountErrorComponent
        if not isinstance(v, BitesCreateRightArmBiteCountErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateRightArmBiteCountErrorComponent`")
        else:
            match += 1
        # validate data type: BitesCreateChestBiteCountErrorComponent
        if not isinstance(v, BitesCreateChestBiteCountErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateChestBiteCountErrorComponent`")
        else:
            match += 1
        # validate data type: BitesCreateLeftLegBiteCountErrorComponent
        if not isinstance(v, BitesCreateLeftLegBiteCountErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateLeftLegBiteCountErrorComponent`")
        else:
            match += 1
        # validate data type: BitesCreateRightLegBiteCountErrorComponent
        if not isinstance(v, BitesCreateRightLegBiteCountErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BitesCreateRightLegBiteCountErrorComponent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in BitesCreateError with oneOf schemas: BitesCreateChestBiteCountErrorComponent, BitesCreateCreatedAtErrorComponent, BitesCreateEventEnvironmentErrorComponent, BitesCreateEventMomentErrorComponent, BitesCreateHeadBiteCountErrorComponent, BitesCreateLeftArmBiteCountErrorComponent, BitesCreateLeftLegBiteCountErrorComponent, BitesCreateLocationNonFieldErrorsErrorComponent, BitesCreateLocationPointErrorComponent, BitesCreateLocationTypeErrorComponent, BitesCreateNonFieldErrorsErrorComponent, BitesCreateNoteErrorComponent, BitesCreateRightArmBiteCountErrorComponent, BitesCreateRightLegBiteCountErrorComponent, BitesCreateSentAtErrorComponent, BitesCreateTagsErrorComponent, BitesCreateTagsINDEXErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in BitesCreateError with oneOf schemas: BitesCreateChestBiteCountErrorComponent, BitesCreateCreatedAtErrorComponent, BitesCreateEventEnvironmentErrorComponent, BitesCreateEventMomentErrorComponent, BitesCreateHeadBiteCountErrorComponent, BitesCreateLeftArmBiteCountErrorComponent, BitesCreateLeftLegBiteCountErrorComponent, BitesCreateLocationNonFieldErrorsErrorComponent, BitesCreateLocationPointErrorComponent, BitesCreateLocationTypeErrorComponent, BitesCreateNonFieldErrorsErrorComponent, BitesCreateNoteErrorComponent, BitesCreateRightArmBiteCountErrorComponent, BitesCreateRightLegBiteCountErrorComponent, BitesCreateSentAtErrorComponent, BitesCreateTagsErrorComponent, BitesCreateTagsINDEXErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into BitesCreateNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = BitesCreateNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BitesCreateCreatedAtErrorComponent
        try:
            instance.actual_instance = BitesCreateCreatedAtErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BitesCreateSentAtErrorComponent
        try:
            instance.actual_instance = BitesCreateSentAtErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BitesCreateLocationNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = BitesCreateLocationNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BitesCreateLocationTypeErrorComponent
        try:
            instance.actual_instance = BitesCreateLocationTypeErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BitesCreateLocationPointErrorComponent
        try:
            instance.actual_instance = BitesCreateLocationPointErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BitesCreateNoteErrorComponent
        try:
            instance.actual_instance = BitesCreateNoteErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BitesCreateTagsErrorComponent
        try:
            instance.actual_instance = BitesCreateTagsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BitesCreateTagsINDEXErrorComponent
        try:
            instance.actual_instance = BitesCreateTagsINDEXErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BitesCreateEventEnvironmentErrorComponent
        try:
            instance.actual_instance = BitesCreateEventEnvironmentErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BitesCreateEventMomentErrorComponent
        try:
            instance.actual_instance = BitesCreateEventMomentErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BitesCreateHeadBiteCountErrorComponent
        try:
            instance.actual_instance = BitesCreateHeadBiteCountErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BitesCreateLeftArmBiteCountErrorComponent
        try:
            instance.actual_instance = BitesCreateLeftArmBiteCountErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BitesCreateRightArmBiteCountErrorComponent
        try:
            instance.actual_instance = BitesCreateRightArmBiteCountErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BitesCreateChestBiteCountErrorComponent
        try:
            instance.actual_instance = BitesCreateChestBiteCountErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BitesCreateLeftLegBiteCountErrorComponent
        try:
            instance.actual_instance = BitesCreateLeftLegBiteCountErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BitesCreateRightLegBiteCountErrorComponent
        try:
            instance.actual_instance = BitesCreateRightLegBiteCountErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BitesCreateError with oneOf schemas: BitesCreateChestBiteCountErrorComponent, BitesCreateCreatedAtErrorComponent, BitesCreateEventEnvironmentErrorComponent, BitesCreateEventMomentErrorComponent, BitesCreateHeadBiteCountErrorComponent, BitesCreateLeftArmBiteCountErrorComponent, BitesCreateLeftLegBiteCountErrorComponent, BitesCreateLocationNonFieldErrorsErrorComponent, BitesCreateLocationPointErrorComponent, BitesCreateLocationTypeErrorComponent, BitesCreateNonFieldErrorsErrorComponent, BitesCreateNoteErrorComponent, BitesCreateRightArmBiteCountErrorComponent, BitesCreateRightLegBiteCountErrorComponent, BitesCreateSentAtErrorComponent, BitesCreateTagsErrorComponent, BitesCreateTagsINDEXErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BitesCreateError with oneOf schemas: BitesCreateChestBiteCountErrorComponent, BitesCreateCreatedAtErrorComponent, BitesCreateEventEnvironmentErrorComponent, BitesCreateEventMomentErrorComponent, BitesCreateHeadBiteCountErrorComponent, BitesCreateLeftArmBiteCountErrorComponent, BitesCreateLeftLegBiteCountErrorComponent, BitesCreateLocationNonFieldErrorsErrorComponent, BitesCreateLocationPointErrorComponent, BitesCreateLocationTypeErrorComponent, BitesCreateNonFieldErrorsErrorComponent, BitesCreateNoteErrorComponent, BitesCreateRightArmBiteCountErrorComponent, BitesCreateRightLegBiteCountErrorComponent, BitesCreateSentAtErrorComponent, BitesCreateTagsErrorComponent, BitesCreateTagsINDEXErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], BitesCreateChestBiteCountErrorComponent, BitesCreateCreatedAtErrorComponent, BitesCreateEventEnvironmentErrorComponent, BitesCreateEventMomentErrorComponent, BitesCreateHeadBiteCountErrorComponent, BitesCreateLeftArmBiteCountErrorComponent, BitesCreateLeftLegBiteCountErrorComponent, BitesCreateLocationNonFieldErrorsErrorComponent, BitesCreateLocationPointErrorComponent, BitesCreateLocationTypeErrorComponent, BitesCreateNonFieldErrorsErrorComponent, BitesCreateNoteErrorComponent, BitesCreateRightArmBiteCountErrorComponent, BitesCreateRightLegBiteCountErrorComponent, BitesCreateSentAtErrorComponent, BitesCreateTagsErrorComponent, BitesCreateTagsINDEXErrorComponent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


