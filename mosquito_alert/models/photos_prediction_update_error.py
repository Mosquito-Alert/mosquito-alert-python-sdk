# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from mosquito_alert.models.photos_prediction_update_bbox_non_field_errors_error_component import PhotosPredictionUpdateBboxNonFieldErrorsErrorComponent
from mosquito_alert.models.photos_prediction_update_bbox_x_max_error_component import PhotosPredictionUpdateBboxXMaxErrorComponent
from mosquito_alert.models.photos_prediction_update_bbox_x_min_error_component import PhotosPredictionUpdateBboxXMinErrorComponent
from mosquito_alert.models.photos_prediction_update_bbox_y_max_error_component import PhotosPredictionUpdateBboxYMaxErrorComponent
from mosquito_alert.models.photos_prediction_update_bbox_y_min_error_component import PhotosPredictionUpdateBboxYMinErrorComponent
from mosquito_alert.models.photos_prediction_update_classifier_version_error_component import PhotosPredictionUpdateClassifierVersionErrorComponent
from mosquito_alert.models.photos_prediction_update_insect_confidence_error_component import PhotosPredictionUpdateInsectConfidenceErrorComponent
from mosquito_alert.models.photos_prediction_update_is_decisive_error_component import PhotosPredictionUpdateIsDecisiveErrorComponent
from mosquito_alert.models.photos_prediction_update_non_field_errors_error_component import PhotosPredictionUpdateNonFieldErrorsErrorComponent
from mosquito_alert.models.photos_prediction_update_predicted_class_error_component import PhotosPredictionUpdatePredictedClassErrorComponent
from mosquito_alert.models.photos_prediction_update_scores_ae_aegypti_error_component import PhotosPredictionUpdateScoresAeAegyptiErrorComponent
from mosquito_alert.models.photos_prediction_update_scores_ae_albopictus_error_component import PhotosPredictionUpdateScoresAeAlbopictusErrorComponent
from mosquito_alert.models.photos_prediction_update_scores_ae_japonicus_error_component import PhotosPredictionUpdateScoresAeJaponicusErrorComponent
from mosquito_alert.models.photos_prediction_update_scores_ae_koreicus_error_component import PhotosPredictionUpdateScoresAeKoreicusErrorComponent
from mosquito_alert.models.photos_prediction_update_scores_anopheles_error_component import PhotosPredictionUpdateScoresAnophelesErrorComponent
from mosquito_alert.models.photos_prediction_update_scores_culex_error_component import PhotosPredictionUpdateScoresCulexErrorComponent
from mosquito_alert.models.photos_prediction_update_scores_culiseta_error_component import PhotosPredictionUpdateScoresCulisetaErrorComponent
from mosquito_alert.models.photos_prediction_update_scores_non_field_errors_error_component import PhotosPredictionUpdateScoresNonFieldErrorsErrorComponent
from mosquito_alert.models.photos_prediction_update_scores_not_sure_error_component import PhotosPredictionUpdateScoresNotSureErrorComponent
from mosquito_alert.models.photos_prediction_update_scores_other_species_error_component import PhotosPredictionUpdateScoresOtherSpeciesErrorComponent
from mosquito_alert.models.photos_prediction_update_threshold_deviation_error_component import PhotosPredictionUpdateThresholdDeviationErrorComponent
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

PHOTOSPREDICTIONUPDATEERROR_ONE_OF_SCHEMAS = ["PhotosPredictionUpdateBboxNonFieldErrorsErrorComponent", "PhotosPredictionUpdateBboxXMaxErrorComponent", "PhotosPredictionUpdateBboxXMinErrorComponent", "PhotosPredictionUpdateBboxYMaxErrorComponent", "PhotosPredictionUpdateBboxYMinErrorComponent", "PhotosPredictionUpdateClassifierVersionErrorComponent", "PhotosPredictionUpdateInsectConfidenceErrorComponent", "PhotosPredictionUpdateIsDecisiveErrorComponent", "PhotosPredictionUpdateNonFieldErrorsErrorComponent", "PhotosPredictionUpdatePredictedClassErrorComponent", "PhotosPredictionUpdateScoresAeAegyptiErrorComponent", "PhotosPredictionUpdateScoresAeAlbopictusErrorComponent", "PhotosPredictionUpdateScoresAeJaponicusErrorComponent", "PhotosPredictionUpdateScoresAeKoreicusErrorComponent", "PhotosPredictionUpdateScoresAnophelesErrorComponent", "PhotosPredictionUpdateScoresCulexErrorComponent", "PhotosPredictionUpdateScoresCulisetaErrorComponent", "PhotosPredictionUpdateScoresNonFieldErrorsErrorComponent", "PhotosPredictionUpdateScoresNotSureErrorComponent", "PhotosPredictionUpdateScoresOtherSpeciesErrorComponent", "PhotosPredictionUpdateThresholdDeviationErrorComponent"]

class PhotosPredictionUpdateError(BaseModel):
    """
    PhotosPredictionUpdateError
    """
    # data type: PhotosPredictionUpdateNonFieldErrorsErrorComponent
    oneof_schema_1_validator: Optional[PhotosPredictionUpdateNonFieldErrorsErrorComponent] = None
    # data type: PhotosPredictionUpdateBboxNonFieldErrorsErrorComponent
    oneof_schema_2_validator: Optional[PhotosPredictionUpdateBboxNonFieldErrorsErrorComponent] = None
    # data type: PhotosPredictionUpdateBboxXMinErrorComponent
    oneof_schema_3_validator: Optional[PhotosPredictionUpdateBboxXMinErrorComponent] = None
    # data type: PhotosPredictionUpdateBboxYMinErrorComponent
    oneof_schema_4_validator: Optional[PhotosPredictionUpdateBboxYMinErrorComponent] = None
    # data type: PhotosPredictionUpdateBboxXMaxErrorComponent
    oneof_schema_5_validator: Optional[PhotosPredictionUpdateBboxXMaxErrorComponent] = None
    # data type: PhotosPredictionUpdateBboxYMaxErrorComponent
    oneof_schema_6_validator: Optional[PhotosPredictionUpdateBboxYMaxErrorComponent] = None
    # data type: PhotosPredictionUpdateInsectConfidenceErrorComponent
    oneof_schema_7_validator: Optional[PhotosPredictionUpdateInsectConfidenceErrorComponent] = None
    # data type: PhotosPredictionUpdatePredictedClassErrorComponent
    oneof_schema_8_validator: Optional[PhotosPredictionUpdatePredictedClassErrorComponent] = None
    # data type: PhotosPredictionUpdateThresholdDeviationErrorComponent
    oneof_schema_9_validator: Optional[PhotosPredictionUpdateThresholdDeviationErrorComponent] = None
    # data type: PhotosPredictionUpdateIsDecisiveErrorComponent
    oneof_schema_10_validator: Optional[PhotosPredictionUpdateIsDecisiveErrorComponent] = None
    # data type: PhotosPredictionUpdateScoresNonFieldErrorsErrorComponent
    oneof_schema_11_validator: Optional[PhotosPredictionUpdateScoresNonFieldErrorsErrorComponent] = None
    # data type: PhotosPredictionUpdateScoresAeAlbopictusErrorComponent
    oneof_schema_12_validator: Optional[PhotosPredictionUpdateScoresAeAlbopictusErrorComponent] = None
    # data type: PhotosPredictionUpdateScoresAeAegyptiErrorComponent
    oneof_schema_13_validator: Optional[PhotosPredictionUpdateScoresAeAegyptiErrorComponent] = None
    # data type: PhotosPredictionUpdateScoresAeJaponicusErrorComponent
    oneof_schema_14_validator: Optional[PhotosPredictionUpdateScoresAeJaponicusErrorComponent] = None
    # data type: PhotosPredictionUpdateScoresAeKoreicusErrorComponent
    oneof_schema_15_validator: Optional[PhotosPredictionUpdateScoresAeKoreicusErrorComponent] = None
    # data type: PhotosPredictionUpdateScoresCulexErrorComponent
    oneof_schema_16_validator: Optional[PhotosPredictionUpdateScoresCulexErrorComponent] = None
    # data type: PhotosPredictionUpdateScoresAnophelesErrorComponent
    oneof_schema_17_validator: Optional[PhotosPredictionUpdateScoresAnophelesErrorComponent] = None
    # data type: PhotosPredictionUpdateScoresCulisetaErrorComponent
    oneof_schema_18_validator: Optional[PhotosPredictionUpdateScoresCulisetaErrorComponent] = None
    # data type: PhotosPredictionUpdateScoresOtherSpeciesErrorComponent
    oneof_schema_19_validator: Optional[PhotosPredictionUpdateScoresOtherSpeciesErrorComponent] = None
    # data type: PhotosPredictionUpdateScoresNotSureErrorComponent
    oneof_schema_20_validator: Optional[PhotosPredictionUpdateScoresNotSureErrorComponent] = None
    # data type: PhotosPredictionUpdateClassifierVersionErrorComponent
    oneof_schema_21_validator: Optional[PhotosPredictionUpdateClassifierVersionErrorComponent] = None
    actual_instance: Optional[Union[PhotosPredictionUpdateBboxNonFieldErrorsErrorComponent, PhotosPredictionUpdateBboxXMaxErrorComponent, PhotosPredictionUpdateBboxXMinErrorComponent, PhotosPredictionUpdateBboxYMaxErrorComponent, PhotosPredictionUpdateBboxYMinErrorComponent, PhotosPredictionUpdateClassifierVersionErrorComponent, PhotosPredictionUpdateInsectConfidenceErrorComponent, PhotosPredictionUpdateIsDecisiveErrorComponent, PhotosPredictionUpdateNonFieldErrorsErrorComponent, PhotosPredictionUpdatePredictedClassErrorComponent, PhotosPredictionUpdateScoresAeAegyptiErrorComponent, PhotosPredictionUpdateScoresAeAlbopictusErrorComponent, PhotosPredictionUpdateScoresAeJaponicusErrorComponent, PhotosPredictionUpdateScoresAeKoreicusErrorComponent, PhotosPredictionUpdateScoresAnophelesErrorComponent, PhotosPredictionUpdateScoresCulexErrorComponent, PhotosPredictionUpdateScoresCulisetaErrorComponent, PhotosPredictionUpdateScoresNonFieldErrorsErrorComponent, PhotosPredictionUpdateScoresNotSureErrorComponent, PhotosPredictionUpdateScoresOtherSpeciesErrorComponent, PhotosPredictionUpdateThresholdDeviationErrorComponent]] = None
    one_of_schemas: Set[str] = { "PhotosPredictionUpdateBboxNonFieldErrorsErrorComponent", "PhotosPredictionUpdateBboxXMaxErrorComponent", "PhotosPredictionUpdateBboxXMinErrorComponent", "PhotosPredictionUpdateBboxYMaxErrorComponent", "PhotosPredictionUpdateBboxYMinErrorComponent", "PhotosPredictionUpdateClassifierVersionErrorComponent", "PhotosPredictionUpdateInsectConfidenceErrorComponent", "PhotosPredictionUpdateIsDecisiveErrorComponent", "PhotosPredictionUpdateNonFieldErrorsErrorComponent", "PhotosPredictionUpdatePredictedClassErrorComponent", "PhotosPredictionUpdateScoresAeAegyptiErrorComponent", "PhotosPredictionUpdateScoresAeAlbopictusErrorComponent", "PhotosPredictionUpdateScoresAeJaponicusErrorComponent", "PhotosPredictionUpdateScoresAeKoreicusErrorComponent", "PhotosPredictionUpdateScoresAnophelesErrorComponent", "PhotosPredictionUpdateScoresCulexErrorComponent", "PhotosPredictionUpdateScoresCulisetaErrorComponent", "PhotosPredictionUpdateScoresNonFieldErrorsErrorComponent", "PhotosPredictionUpdateScoresNotSureErrorComponent", "PhotosPredictionUpdateScoresOtherSpeciesErrorComponent", "PhotosPredictionUpdateThresholdDeviationErrorComponent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = PhotosPredictionUpdateError.model_construct()
        error_messages = []
        match = 0
        # validate data type: PhotosPredictionUpdateNonFieldErrorsErrorComponent
        if not isinstance(v, PhotosPredictionUpdateNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateBboxNonFieldErrorsErrorComponent
        if not isinstance(v, PhotosPredictionUpdateBboxNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateBboxNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateBboxXMinErrorComponent
        if not isinstance(v, PhotosPredictionUpdateBboxXMinErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateBboxXMinErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateBboxYMinErrorComponent
        if not isinstance(v, PhotosPredictionUpdateBboxYMinErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateBboxYMinErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateBboxXMaxErrorComponent
        if not isinstance(v, PhotosPredictionUpdateBboxXMaxErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateBboxXMaxErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateBboxYMaxErrorComponent
        if not isinstance(v, PhotosPredictionUpdateBboxYMaxErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateBboxYMaxErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateInsectConfidenceErrorComponent
        if not isinstance(v, PhotosPredictionUpdateInsectConfidenceErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateInsectConfidenceErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdatePredictedClassErrorComponent
        if not isinstance(v, PhotosPredictionUpdatePredictedClassErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdatePredictedClassErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateThresholdDeviationErrorComponent
        if not isinstance(v, PhotosPredictionUpdateThresholdDeviationErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateThresholdDeviationErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateIsDecisiveErrorComponent
        if not isinstance(v, PhotosPredictionUpdateIsDecisiveErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateIsDecisiveErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateScoresNonFieldErrorsErrorComponent
        if not isinstance(v, PhotosPredictionUpdateScoresNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateScoresNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateScoresAeAlbopictusErrorComponent
        if not isinstance(v, PhotosPredictionUpdateScoresAeAlbopictusErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateScoresAeAlbopictusErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateScoresAeAegyptiErrorComponent
        if not isinstance(v, PhotosPredictionUpdateScoresAeAegyptiErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateScoresAeAegyptiErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateScoresAeJaponicusErrorComponent
        if not isinstance(v, PhotosPredictionUpdateScoresAeJaponicusErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateScoresAeJaponicusErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateScoresAeKoreicusErrorComponent
        if not isinstance(v, PhotosPredictionUpdateScoresAeKoreicusErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateScoresAeKoreicusErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateScoresCulexErrorComponent
        if not isinstance(v, PhotosPredictionUpdateScoresCulexErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateScoresCulexErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateScoresAnophelesErrorComponent
        if not isinstance(v, PhotosPredictionUpdateScoresAnophelesErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateScoresAnophelesErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateScoresCulisetaErrorComponent
        if not isinstance(v, PhotosPredictionUpdateScoresCulisetaErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateScoresCulisetaErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateScoresOtherSpeciesErrorComponent
        if not isinstance(v, PhotosPredictionUpdateScoresOtherSpeciesErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateScoresOtherSpeciesErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateScoresNotSureErrorComponent
        if not isinstance(v, PhotosPredictionUpdateScoresNotSureErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateScoresNotSureErrorComponent`")
        else:
            match += 1
        # validate data type: PhotosPredictionUpdateClassifierVersionErrorComponent
        if not isinstance(v, PhotosPredictionUpdateClassifierVersionErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhotosPredictionUpdateClassifierVersionErrorComponent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in PhotosPredictionUpdateError with oneOf schemas: PhotosPredictionUpdateBboxNonFieldErrorsErrorComponent, PhotosPredictionUpdateBboxXMaxErrorComponent, PhotosPredictionUpdateBboxXMinErrorComponent, PhotosPredictionUpdateBboxYMaxErrorComponent, PhotosPredictionUpdateBboxYMinErrorComponent, PhotosPredictionUpdateClassifierVersionErrorComponent, PhotosPredictionUpdateInsectConfidenceErrorComponent, PhotosPredictionUpdateIsDecisiveErrorComponent, PhotosPredictionUpdateNonFieldErrorsErrorComponent, PhotosPredictionUpdatePredictedClassErrorComponent, PhotosPredictionUpdateScoresAeAegyptiErrorComponent, PhotosPredictionUpdateScoresAeAlbopictusErrorComponent, PhotosPredictionUpdateScoresAeJaponicusErrorComponent, PhotosPredictionUpdateScoresAeKoreicusErrorComponent, PhotosPredictionUpdateScoresAnophelesErrorComponent, PhotosPredictionUpdateScoresCulexErrorComponent, PhotosPredictionUpdateScoresCulisetaErrorComponent, PhotosPredictionUpdateScoresNonFieldErrorsErrorComponent, PhotosPredictionUpdateScoresNotSureErrorComponent, PhotosPredictionUpdateScoresOtherSpeciesErrorComponent, PhotosPredictionUpdateThresholdDeviationErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in PhotosPredictionUpdateError with oneOf schemas: PhotosPredictionUpdateBboxNonFieldErrorsErrorComponent, PhotosPredictionUpdateBboxXMaxErrorComponent, PhotosPredictionUpdateBboxXMinErrorComponent, PhotosPredictionUpdateBboxYMaxErrorComponent, PhotosPredictionUpdateBboxYMinErrorComponent, PhotosPredictionUpdateClassifierVersionErrorComponent, PhotosPredictionUpdateInsectConfidenceErrorComponent, PhotosPredictionUpdateIsDecisiveErrorComponent, PhotosPredictionUpdateNonFieldErrorsErrorComponent, PhotosPredictionUpdatePredictedClassErrorComponent, PhotosPredictionUpdateScoresAeAegyptiErrorComponent, PhotosPredictionUpdateScoresAeAlbopictusErrorComponent, PhotosPredictionUpdateScoresAeJaponicusErrorComponent, PhotosPredictionUpdateScoresAeKoreicusErrorComponent, PhotosPredictionUpdateScoresAnophelesErrorComponent, PhotosPredictionUpdateScoresCulexErrorComponent, PhotosPredictionUpdateScoresCulisetaErrorComponent, PhotosPredictionUpdateScoresNonFieldErrorsErrorComponent, PhotosPredictionUpdateScoresNotSureErrorComponent, PhotosPredictionUpdateScoresOtherSpeciesErrorComponent, PhotosPredictionUpdateThresholdDeviationErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into PhotosPredictionUpdateNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateBboxNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateBboxNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateBboxXMinErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateBboxXMinErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateBboxYMinErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateBboxYMinErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateBboxXMaxErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateBboxXMaxErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateBboxYMaxErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateBboxYMaxErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateInsectConfidenceErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateInsectConfidenceErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdatePredictedClassErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdatePredictedClassErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateThresholdDeviationErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateThresholdDeviationErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateIsDecisiveErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateIsDecisiveErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateScoresNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateScoresNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateScoresAeAlbopictusErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateScoresAeAlbopictusErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateScoresAeAegyptiErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateScoresAeAegyptiErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateScoresAeJaponicusErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateScoresAeJaponicusErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateScoresAeKoreicusErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateScoresAeKoreicusErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateScoresCulexErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateScoresCulexErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateScoresAnophelesErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateScoresAnophelesErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateScoresCulisetaErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateScoresCulisetaErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateScoresOtherSpeciesErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateScoresOtherSpeciesErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateScoresNotSureErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateScoresNotSureErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhotosPredictionUpdateClassifierVersionErrorComponent
        try:
            instance.actual_instance = PhotosPredictionUpdateClassifierVersionErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into PhotosPredictionUpdateError with oneOf schemas: PhotosPredictionUpdateBboxNonFieldErrorsErrorComponent, PhotosPredictionUpdateBboxXMaxErrorComponent, PhotosPredictionUpdateBboxXMinErrorComponent, PhotosPredictionUpdateBboxYMaxErrorComponent, PhotosPredictionUpdateBboxYMinErrorComponent, PhotosPredictionUpdateClassifierVersionErrorComponent, PhotosPredictionUpdateInsectConfidenceErrorComponent, PhotosPredictionUpdateIsDecisiveErrorComponent, PhotosPredictionUpdateNonFieldErrorsErrorComponent, PhotosPredictionUpdatePredictedClassErrorComponent, PhotosPredictionUpdateScoresAeAegyptiErrorComponent, PhotosPredictionUpdateScoresAeAlbopictusErrorComponent, PhotosPredictionUpdateScoresAeJaponicusErrorComponent, PhotosPredictionUpdateScoresAeKoreicusErrorComponent, PhotosPredictionUpdateScoresAnophelesErrorComponent, PhotosPredictionUpdateScoresCulexErrorComponent, PhotosPredictionUpdateScoresCulisetaErrorComponent, PhotosPredictionUpdateScoresNonFieldErrorsErrorComponent, PhotosPredictionUpdateScoresNotSureErrorComponent, PhotosPredictionUpdateScoresOtherSpeciesErrorComponent, PhotosPredictionUpdateThresholdDeviationErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into PhotosPredictionUpdateError with oneOf schemas: PhotosPredictionUpdateBboxNonFieldErrorsErrorComponent, PhotosPredictionUpdateBboxXMaxErrorComponent, PhotosPredictionUpdateBboxXMinErrorComponent, PhotosPredictionUpdateBboxYMaxErrorComponent, PhotosPredictionUpdateBboxYMinErrorComponent, PhotosPredictionUpdateClassifierVersionErrorComponent, PhotosPredictionUpdateInsectConfidenceErrorComponent, PhotosPredictionUpdateIsDecisiveErrorComponent, PhotosPredictionUpdateNonFieldErrorsErrorComponent, PhotosPredictionUpdatePredictedClassErrorComponent, PhotosPredictionUpdateScoresAeAegyptiErrorComponent, PhotosPredictionUpdateScoresAeAlbopictusErrorComponent, PhotosPredictionUpdateScoresAeJaponicusErrorComponent, PhotosPredictionUpdateScoresAeKoreicusErrorComponent, PhotosPredictionUpdateScoresAnophelesErrorComponent, PhotosPredictionUpdateScoresCulexErrorComponent, PhotosPredictionUpdateScoresCulisetaErrorComponent, PhotosPredictionUpdateScoresNonFieldErrorsErrorComponent, PhotosPredictionUpdateScoresNotSureErrorComponent, PhotosPredictionUpdateScoresOtherSpeciesErrorComponent, PhotosPredictionUpdateThresholdDeviationErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], PhotosPredictionUpdateBboxNonFieldErrorsErrorComponent, PhotosPredictionUpdateBboxXMaxErrorComponent, PhotosPredictionUpdateBboxXMinErrorComponent, PhotosPredictionUpdateBboxYMaxErrorComponent, PhotosPredictionUpdateBboxYMinErrorComponent, PhotosPredictionUpdateClassifierVersionErrorComponent, PhotosPredictionUpdateInsectConfidenceErrorComponent, PhotosPredictionUpdateIsDecisiveErrorComponent, PhotosPredictionUpdateNonFieldErrorsErrorComponent, PhotosPredictionUpdatePredictedClassErrorComponent, PhotosPredictionUpdateScoresAeAegyptiErrorComponent, PhotosPredictionUpdateScoresAeAlbopictusErrorComponent, PhotosPredictionUpdateScoresAeJaponicusErrorComponent, PhotosPredictionUpdateScoresAeKoreicusErrorComponent, PhotosPredictionUpdateScoresAnophelesErrorComponent, PhotosPredictionUpdateScoresCulexErrorComponent, PhotosPredictionUpdateScoresCulisetaErrorComponent, PhotosPredictionUpdateScoresNonFieldErrorsErrorComponent, PhotosPredictionUpdateScoresNotSureErrorComponent, PhotosPredictionUpdateScoresOtherSpeciesErrorComponent, PhotosPredictionUpdateThresholdDeviationErrorComponent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


