# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from mosquito_alert.models.fixes_create_coverage_uuid_error_component import FixesCreateCoverageUuidErrorComponent
from mosquito_alert.models.fixes_create_created_at_error_component import FixesCreateCreatedAtErrorComponent
from mosquito_alert.models.fixes_create_non_field_errors_error_component import FixesCreateNonFieldErrorsErrorComponent
from mosquito_alert.models.fixes_create_point_latitude_error_component import FixesCreatePointLatitudeErrorComponent
from mosquito_alert.models.fixes_create_point_longitude_error_component import FixesCreatePointLongitudeErrorComponent
from mosquito_alert.models.fixes_create_point_non_field_errors_error_component import FixesCreatePointNonFieldErrorsErrorComponent
from mosquito_alert.models.fixes_create_power_error_component import FixesCreatePowerErrorComponent
from mosquito_alert.models.fixes_create_sent_at_error_component import FixesCreateSentAtErrorComponent
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

FIXESCREATEERROR_ONE_OF_SCHEMAS = ["FixesCreateCoverageUuidErrorComponent", "FixesCreateCreatedAtErrorComponent", "FixesCreateNonFieldErrorsErrorComponent", "FixesCreatePointLatitudeErrorComponent", "FixesCreatePointLongitudeErrorComponent", "FixesCreatePointNonFieldErrorsErrorComponent", "FixesCreatePowerErrorComponent", "FixesCreateSentAtErrorComponent"]

class FixesCreateError(BaseModel):
    """
    FixesCreateError
    """
    # data type: FixesCreateNonFieldErrorsErrorComponent
    oneof_schema_1_validator: Optional[FixesCreateNonFieldErrorsErrorComponent] = None
    # data type: FixesCreateCoverageUuidErrorComponent
    oneof_schema_2_validator: Optional[FixesCreateCoverageUuidErrorComponent] = None
    # data type: FixesCreateCreatedAtErrorComponent
    oneof_schema_3_validator: Optional[FixesCreateCreatedAtErrorComponent] = None
    # data type: FixesCreateSentAtErrorComponent
    oneof_schema_4_validator: Optional[FixesCreateSentAtErrorComponent] = None
    # data type: FixesCreatePointNonFieldErrorsErrorComponent
    oneof_schema_5_validator: Optional[FixesCreatePointNonFieldErrorsErrorComponent] = None
    # data type: FixesCreatePointLatitudeErrorComponent
    oneof_schema_6_validator: Optional[FixesCreatePointLatitudeErrorComponent] = None
    # data type: FixesCreatePointLongitudeErrorComponent
    oneof_schema_7_validator: Optional[FixesCreatePointLongitudeErrorComponent] = None
    # data type: FixesCreatePowerErrorComponent
    oneof_schema_8_validator: Optional[FixesCreatePowerErrorComponent] = None
    actual_instance: Optional[Union[FixesCreateCoverageUuidErrorComponent, FixesCreateCreatedAtErrorComponent, FixesCreateNonFieldErrorsErrorComponent, FixesCreatePointLatitudeErrorComponent, FixesCreatePointLongitudeErrorComponent, FixesCreatePointNonFieldErrorsErrorComponent, FixesCreatePowerErrorComponent, FixesCreateSentAtErrorComponent]] = None
    one_of_schemas: Set[str] = { "FixesCreateCoverageUuidErrorComponent", "FixesCreateCreatedAtErrorComponent", "FixesCreateNonFieldErrorsErrorComponent", "FixesCreatePointLatitudeErrorComponent", "FixesCreatePointLongitudeErrorComponent", "FixesCreatePointNonFieldErrorsErrorComponent", "FixesCreatePowerErrorComponent", "FixesCreateSentAtErrorComponent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = FixesCreateError.model_construct()
        error_messages = []
        match = 0
        # validate data type: FixesCreateNonFieldErrorsErrorComponent
        if not isinstance(v, FixesCreateNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FixesCreateNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: FixesCreateCoverageUuidErrorComponent
        if not isinstance(v, FixesCreateCoverageUuidErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FixesCreateCoverageUuidErrorComponent`")
        else:
            match += 1
        # validate data type: FixesCreateCreatedAtErrorComponent
        if not isinstance(v, FixesCreateCreatedAtErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FixesCreateCreatedAtErrorComponent`")
        else:
            match += 1
        # validate data type: FixesCreateSentAtErrorComponent
        if not isinstance(v, FixesCreateSentAtErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FixesCreateSentAtErrorComponent`")
        else:
            match += 1
        # validate data type: FixesCreatePointNonFieldErrorsErrorComponent
        if not isinstance(v, FixesCreatePointNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FixesCreatePointNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: FixesCreatePointLatitudeErrorComponent
        if not isinstance(v, FixesCreatePointLatitudeErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FixesCreatePointLatitudeErrorComponent`")
        else:
            match += 1
        # validate data type: FixesCreatePointLongitudeErrorComponent
        if not isinstance(v, FixesCreatePointLongitudeErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FixesCreatePointLongitudeErrorComponent`")
        else:
            match += 1
        # validate data type: FixesCreatePowerErrorComponent
        if not isinstance(v, FixesCreatePowerErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FixesCreatePowerErrorComponent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in FixesCreateError with oneOf schemas: FixesCreateCoverageUuidErrorComponent, FixesCreateCreatedAtErrorComponent, FixesCreateNonFieldErrorsErrorComponent, FixesCreatePointLatitudeErrorComponent, FixesCreatePointLongitudeErrorComponent, FixesCreatePointNonFieldErrorsErrorComponent, FixesCreatePowerErrorComponent, FixesCreateSentAtErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in FixesCreateError with oneOf schemas: FixesCreateCoverageUuidErrorComponent, FixesCreateCreatedAtErrorComponent, FixesCreateNonFieldErrorsErrorComponent, FixesCreatePointLatitudeErrorComponent, FixesCreatePointLongitudeErrorComponent, FixesCreatePointNonFieldErrorsErrorComponent, FixesCreatePowerErrorComponent, FixesCreateSentAtErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into FixesCreateNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = FixesCreateNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FixesCreateCoverageUuidErrorComponent
        try:
            instance.actual_instance = FixesCreateCoverageUuidErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FixesCreateCreatedAtErrorComponent
        try:
            instance.actual_instance = FixesCreateCreatedAtErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FixesCreateSentAtErrorComponent
        try:
            instance.actual_instance = FixesCreateSentAtErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FixesCreatePointNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = FixesCreatePointNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FixesCreatePointLatitudeErrorComponent
        try:
            instance.actual_instance = FixesCreatePointLatitudeErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FixesCreatePointLongitudeErrorComponent
        try:
            instance.actual_instance = FixesCreatePointLongitudeErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FixesCreatePowerErrorComponent
        try:
            instance.actual_instance = FixesCreatePowerErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into FixesCreateError with oneOf schemas: FixesCreateCoverageUuidErrorComponent, FixesCreateCreatedAtErrorComponent, FixesCreateNonFieldErrorsErrorComponent, FixesCreatePointLatitudeErrorComponent, FixesCreatePointLongitudeErrorComponent, FixesCreatePointNonFieldErrorsErrorComponent, FixesCreatePowerErrorComponent, FixesCreateSentAtErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into FixesCreateError with oneOf schemas: FixesCreateCoverageUuidErrorComponent, FixesCreateCreatedAtErrorComponent, FixesCreateNonFieldErrorsErrorComponent, FixesCreatePointLatitudeErrorComponent, FixesCreatePointLongitudeErrorComponent, FixesCreatePointNonFieldErrorsErrorComponent, FixesCreatePowerErrorComponent, FixesCreateSentAtErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], FixesCreateCoverageUuidErrorComponent, FixesCreateCreatedAtErrorComponent, FixesCreateNonFieldErrorsErrorComponent, FixesCreatePointLatitudeErrorComponent, FixesCreatePointLongitudeErrorComponent, FixesCreatePointNonFieldErrorsErrorComponent, FixesCreatePowerErrorComponent, FixesCreateSentAtErrorComponent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


