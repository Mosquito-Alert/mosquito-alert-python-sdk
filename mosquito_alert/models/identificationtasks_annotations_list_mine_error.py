# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from mosquito_alert.models.identificationtasks_annotations_list_mine_classification_confidence_error_component import IdentificationtasksAnnotationsListMineClassificationConfidenceErrorComponent
from mosquito_alert.models.identificationtasks_annotations_list_mine_classification_confidence_label_error_component import IdentificationtasksAnnotationsListMineClassificationConfidenceLabelErrorComponent
from mosquito_alert.models.identificationtasks_annotations_list_mine_classification_taxon_ids_error_component import IdentificationtasksAnnotationsListMineClassificationTaxonIdsErrorComponent
from mosquito_alert.models.identificationtasks_annotations_list_mine_created_at_error_component import IdentificationtasksAnnotationsListMineCreatedAtErrorComponent
from mosquito_alert.models.identificationtasks_annotations_list_mine_order_by_error_component import IdentificationtasksAnnotationsListMineOrderByErrorComponent
from mosquito_alert.models.identificationtasks_annotations_list_mine_type_error_component import IdentificationtasksAnnotationsListMineTypeErrorComponent
from mosquito_alert.models.identificationtasks_annotations_list_mine_updated_at_error_component import IdentificationtasksAnnotationsListMineUpdatedAtErrorComponent
from mosquito_alert.models.identificationtasks_annotations_list_mine_user_ids_error_component import IdentificationtasksAnnotationsListMineUserIdsErrorComponent
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

IDENTIFICATIONTASKSANNOTATIONSLISTMINEERROR_ONE_OF_SCHEMAS = ["IdentificationtasksAnnotationsListMineClassificationConfidenceErrorComponent", "IdentificationtasksAnnotationsListMineClassificationConfidenceLabelErrorComponent", "IdentificationtasksAnnotationsListMineClassificationTaxonIdsErrorComponent", "IdentificationtasksAnnotationsListMineCreatedAtErrorComponent", "IdentificationtasksAnnotationsListMineOrderByErrorComponent", "IdentificationtasksAnnotationsListMineTypeErrorComponent", "IdentificationtasksAnnotationsListMineUpdatedAtErrorComponent", "IdentificationtasksAnnotationsListMineUserIdsErrorComponent"]

class IdentificationtasksAnnotationsListMineError(BaseModel):
    """
    IdentificationtasksAnnotationsListMineError
    """
    # data type: IdentificationtasksAnnotationsListMineUserIdsErrorComponent
    oneof_schema_1_validator: Optional[IdentificationtasksAnnotationsListMineUserIdsErrorComponent] = None
    # data type: IdentificationtasksAnnotationsListMineClassificationTaxonIdsErrorComponent
    oneof_schema_2_validator: Optional[IdentificationtasksAnnotationsListMineClassificationTaxonIdsErrorComponent] = None
    # data type: IdentificationtasksAnnotationsListMineClassificationConfidenceErrorComponent
    oneof_schema_3_validator: Optional[IdentificationtasksAnnotationsListMineClassificationConfidenceErrorComponent] = None
    # data type: IdentificationtasksAnnotationsListMineClassificationConfidenceLabelErrorComponent
    oneof_schema_4_validator: Optional[IdentificationtasksAnnotationsListMineClassificationConfidenceLabelErrorComponent] = None
    # data type: IdentificationtasksAnnotationsListMineCreatedAtErrorComponent
    oneof_schema_5_validator: Optional[IdentificationtasksAnnotationsListMineCreatedAtErrorComponent] = None
    # data type: IdentificationtasksAnnotationsListMineUpdatedAtErrorComponent
    oneof_schema_6_validator: Optional[IdentificationtasksAnnotationsListMineUpdatedAtErrorComponent] = None
    # data type: IdentificationtasksAnnotationsListMineTypeErrorComponent
    oneof_schema_7_validator: Optional[IdentificationtasksAnnotationsListMineTypeErrorComponent] = None
    # data type: IdentificationtasksAnnotationsListMineOrderByErrorComponent
    oneof_schema_8_validator: Optional[IdentificationtasksAnnotationsListMineOrderByErrorComponent] = None
    actual_instance: Optional[Union[IdentificationtasksAnnotationsListMineClassificationConfidenceErrorComponent, IdentificationtasksAnnotationsListMineClassificationConfidenceLabelErrorComponent, IdentificationtasksAnnotationsListMineClassificationTaxonIdsErrorComponent, IdentificationtasksAnnotationsListMineCreatedAtErrorComponent, IdentificationtasksAnnotationsListMineOrderByErrorComponent, IdentificationtasksAnnotationsListMineTypeErrorComponent, IdentificationtasksAnnotationsListMineUpdatedAtErrorComponent, IdentificationtasksAnnotationsListMineUserIdsErrorComponent]] = None
    one_of_schemas: Set[str] = { "IdentificationtasksAnnotationsListMineClassificationConfidenceErrorComponent", "IdentificationtasksAnnotationsListMineClassificationConfidenceLabelErrorComponent", "IdentificationtasksAnnotationsListMineClassificationTaxonIdsErrorComponent", "IdentificationtasksAnnotationsListMineCreatedAtErrorComponent", "IdentificationtasksAnnotationsListMineOrderByErrorComponent", "IdentificationtasksAnnotationsListMineTypeErrorComponent", "IdentificationtasksAnnotationsListMineUpdatedAtErrorComponent", "IdentificationtasksAnnotationsListMineUserIdsErrorComponent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = IdentificationtasksAnnotationsListMineError.model_construct()
        error_messages = []
        match = 0
        # validate data type: IdentificationtasksAnnotationsListMineUserIdsErrorComponent
        if not isinstance(v, IdentificationtasksAnnotationsListMineUserIdsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksAnnotationsListMineUserIdsErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksAnnotationsListMineClassificationTaxonIdsErrorComponent
        if not isinstance(v, IdentificationtasksAnnotationsListMineClassificationTaxonIdsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksAnnotationsListMineClassificationTaxonIdsErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksAnnotationsListMineClassificationConfidenceErrorComponent
        if not isinstance(v, IdentificationtasksAnnotationsListMineClassificationConfidenceErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksAnnotationsListMineClassificationConfidenceErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksAnnotationsListMineClassificationConfidenceLabelErrorComponent
        if not isinstance(v, IdentificationtasksAnnotationsListMineClassificationConfidenceLabelErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksAnnotationsListMineClassificationConfidenceLabelErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksAnnotationsListMineCreatedAtErrorComponent
        if not isinstance(v, IdentificationtasksAnnotationsListMineCreatedAtErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksAnnotationsListMineCreatedAtErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksAnnotationsListMineUpdatedAtErrorComponent
        if not isinstance(v, IdentificationtasksAnnotationsListMineUpdatedAtErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksAnnotationsListMineUpdatedAtErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksAnnotationsListMineTypeErrorComponent
        if not isinstance(v, IdentificationtasksAnnotationsListMineTypeErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksAnnotationsListMineTypeErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksAnnotationsListMineOrderByErrorComponent
        if not isinstance(v, IdentificationtasksAnnotationsListMineOrderByErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksAnnotationsListMineOrderByErrorComponent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in IdentificationtasksAnnotationsListMineError with oneOf schemas: IdentificationtasksAnnotationsListMineClassificationConfidenceErrorComponent, IdentificationtasksAnnotationsListMineClassificationConfidenceLabelErrorComponent, IdentificationtasksAnnotationsListMineClassificationTaxonIdsErrorComponent, IdentificationtasksAnnotationsListMineCreatedAtErrorComponent, IdentificationtasksAnnotationsListMineOrderByErrorComponent, IdentificationtasksAnnotationsListMineTypeErrorComponent, IdentificationtasksAnnotationsListMineUpdatedAtErrorComponent, IdentificationtasksAnnotationsListMineUserIdsErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in IdentificationtasksAnnotationsListMineError with oneOf schemas: IdentificationtasksAnnotationsListMineClassificationConfidenceErrorComponent, IdentificationtasksAnnotationsListMineClassificationConfidenceLabelErrorComponent, IdentificationtasksAnnotationsListMineClassificationTaxonIdsErrorComponent, IdentificationtasksAnnotationsListMineCreatedAtErrorComponent, IdentificationtasksAnnotationsListMineOrderByErrorComponent, IdentificationtasksAnnotationsListMineTypeErrorComponent, IdentificationtasksAnnotationsListMineUpdatedAtErrorComponent, IdentificationtasksAnnotationsListMineUserIdsErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into IdentificationtasksAnnotationsListMineUserIdsErrorComponent
        try:
            instance.actual_instance = IdentificationtasksAnnotationsListMineUserIdsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksAnnotationsListMineClassificationTaxonIdsErrorComponent
        try:
            instance.actual_instance = IdentificationtasksAnnotationsListMineClassificationTaxonIdsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksAnnotationsListMineClassificationConfidenceErrorComponent
        try:
            instance.actual_instance = IdentificationtasksAnnotationsListMineClassificationConfidenceErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksAnnotationsListMineClassificationConfidenceLabelErrorComponent
        try:
            instance.actual_instance = IdentificationtasksAnnotationsListMineClassificationConfidenceLabelErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksAnnotationsListMineCreatedAtErrorComponent
        try:
            instance.actual_instance = IdentificationtasksAnnotationsListMineCreatedAtErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksAnnotationsListMineUpdatedAtErrorComponent
        try:
            instance.actual_instance = IdentificationtasksAnnotationsListMineUpdatedAtErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksAnnotationsListMineTypeErrorComponent
        try:
            instance.actual_instance = IdentificationtasksAnnotationsListMineTypeErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksAnnotationsListMineOrderByErrorComponent
        try:
            instance.actual_instance = IdentificationtasksAnnotationsListMineOrderByErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into IdentificationtasksAnnotationsListMineError with oneOf schemas: IdentificationtasksAnnotationsListMineClassificationConfidenceErrorComponent, IdentificationtasksAnnotationsListMineClassificationConfidenceLabelErrorComponent, IdentificationtasksAnnotationsListMineClassificationTaxonIdsErrorComponent, IdentificationtasksAnnotationsListMineCreatedAtErrorComponent, IdentificationtasksAnnotationsListMineOrderByErrorComponent, IdentificationtasksAnnotationsListMineTypeErrorComponent, IdentificationtasksAnnotationsListMineUpdatedAtErrorComponent, IdentificationtasksAnnotationsListMineUserIdsErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into IdentificationtasksAnnotationsListMineError with oneOf schemas: IdentificationtasksAnnotationsListMineClassificationConfidenceErrorComponent, IdentificationtasksAnnotationsListMineClassificationConfidenceLabelErrorComponent, IdentificationtasksAnnotationsListMineClassificationTaxonIdsErrorComponent, IdentificationtasksAnnotationsListMineCreatedAtErrorComponent, IdentificationtasksAnnotationsListMineOrderByErrorComponent, IdentificationtasksAnnotationsListMineTypeErrorComponent, IdentificationtasksAnnotationsListMineUpdatedAtErrorComponent, IdentificationtasksAnnotationsListMineUserIdsErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], IdentificationtasksAnnotationsListMineClassificationConfidenceErrorComponent, IdentificationtasksAnnotationsListMineClassificationConfidenceLabelErrorComponent, IdentificationtasksAnnotationsListMineClassificationTaxonIdsErrorComponent, IdentificationtasksAnnotationsListMineCreatedAtErrorComponent, IdentificationtasksAnnotationsListMineOrderByErrorComponent, IdentificationtasksAnnotationsListMineTypeErrorComponent, IdentificationtasksAnnotationsListMineUpdatedAtErrorComponent, IdentificationtasksAnnotationsListMineUserIdsErrorComponent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


