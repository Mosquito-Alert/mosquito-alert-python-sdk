# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from uuid import UUID
from mosquito_alert.models.device_os import DeviceOs
from mosquito_alert.models.mobile_app import MobileApp
from typing import Optional, Set
from typing_extensions import Self

class DeviceUpdate(BaseModel):
    """
    DeviceUpdate
    """ # noqa: E501
    device_id: StrictStr = Field(description="Unique device identifier")
    name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    type: StrictStr
    manufacturer: StrictStr = Field(description="The manufacturer of the device.")
    model: StrictStr = Field(description="The end-user-visible name for the end product.")
    os: DeviceOs
    mobile_app: Optional[MobileApp] = None
    user_uuid: UUID
    last_login: Optional[datetime]
    created_at: datetime
    updated_at: datetime
    __properties: ClassVar[List[str]] = ["device_id", "name", "type", "manufacturer", "model", "os", "mobile_app", "user_uuid", "last_login", "created_at", "updated_at"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ios', 'android', 'web']):
            raise ValueError("must be one of enum values ('ios', 'android', 'web')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "device_id",
            "type",
            "manufacturer",
            "model",
            "user_uuid",
            "last_login",
            "created_at",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of os
        if self.os:
            _dict['os'] = self.os.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mobile_app
        if self.mobile_app:
            _dict['mobile_app'] = self.mobile_app.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if last_login (nullable) is None
        # and model_fields_set contains the field
        if self.last_login is None and "last_login" in self.model_fields_set:
            _dict['last_login'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "device_id": obj.get("device_id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "manufacturer": obj.get("manufacturer"),
            "model": obj.get("model"),
            "os": DeviceOs.from_dict(obj["os"]) if obj.get("os") is not None else None,
            "mobile_app": MobileApp.from_dict(obj["mobile_app"]) if obj.get("mobile_app") is not None else None,
            "user_uuid": obj.get("user_uuid"),
            "last_login": obj.get("last_login"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


