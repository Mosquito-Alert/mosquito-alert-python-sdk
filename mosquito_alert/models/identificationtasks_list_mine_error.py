# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from mosquito_alert.models.identificationtasks_list_mine_annotator_ids_error_component import IdentificationtasksListMineAnnotatorIdsErrorComponent
from mosquito_alert.models.identificationtasks_list_mine_assignee_ids_error_component import IdentificationtasksListMineAssigneeIdsErrorComponent
from mosquito_alert.models.identificationtasks_list_mine_created_at_error_component import IdentificationtasksListMineCreatedAtErrorComponent
from mosquito_alert.models.identificationtasks_list_mine_num_annotations_error_component import IdentificationtasksListMineNumAnnotationsErrorComponent
from mosquito_alert.models.identificationtasks_list_mine_observation_country_ids_error_component import IdentificationtasksListMineObservationCountryIdsErrorComponent
from mosquito_alert.models.identificationtasks_list_mine_order_by_error_component import IdentificationtasksListMineOrderByErrorComponent
from mosquito_alert.models.identificationtasks_list_mine_result_agreement_error_component import IdentificationtasksListMineResultAgreementErrorComponent
from mosquito_alert.models.identificationtasks_list_mine_result_confidence_error_component import IdentificationtasksListMineResultConfidenceErrorComponent
from mosquito_alert.models.identificationtasks_list_mine_result_source_error_component import IdentificationtasksListMineResultSourceErrorComponent
from mosquito_alert.models.identificationtasks_list_mine_result_taxon_ids_error_component import IdentificationtasksListMineResultTaxonIdsErrorComponent
from mosquito_alert.models.identificationtasks_list_mine_result_uncertainty_error_component import IdentificationtasksListMineResultUncertaintyErrorComponent
from mosquito_alert.models.identificationtasks_list_mine_review_action_error_component import IdentificationtasksListMineReviewActionErrorComponent
from mosquito_alert.models.identificationtasks_list_mine_status_error_component import IdentificationtasksListMineStatusErrorComponent
from mosquito_alert.models.identificationtasks_list_mine_updated_at_error_component import IdentificationtasksListMineUpdatedAtErrorComponent
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

IDENTIFICATIONTASKSLISTMINEERROR_ONE_OF_SCHEMAS = ["IdentificationtasksListMineAnnotatorIdsErrorComponent", "IdentificationtasksListMineAssigneeIdsErrorComponent", "IdentificationtasksListMineCreatedAtErrorComponent", "IdentificationtasksListMineNumAnnotationsErrorComponent", "IdentificationtasksListMineObservationCountryIdsErrorComponent", "IdentificationtasksListMineOrderByErrorComponent", "IdentificationtasksListMineResultAgreementErrorComponent", "IdentificationtasksListMineResultConfidenceErrorComponent", "IdentificationtasksListMineResultSourceErrorComponent", "IdentificationtasksListMineResultTaxonIdsErrorComponent", "IdentificationtasksListMineResultUncertaintyErrorComponent", "IdentificationtasksListMineReviewActionErrorComponent", "IdentificationtasksListMineStatusErrorComponent", "IdentificationtasksListMineUpdatedAtErrorComponent"]

class IdentificationtasksListMineError(BaseModel):
    """
    IdentificationtasksListMineError
    """
    # data type: IdentificationtasksListMineAnnotatorIdsErrorComponent
    oneof_schema_1_validator: Optional[IdentificationtasksListMineAnnotatorIdsErrorComponent] = None
    # data type: IdentificationtasksListMineAssigneeIdsErrorComponent
    oneof_schema_2_validator: Optional[IdentificationtasksListMineAssigneeIdsErrorComponent] = None
    # data type: IdentificationtasksListMineNumAnnotationsErrorComponent
    oneof_schema_3_validator: Optional[IdentificationtasksListMineNumAnnotationsErrorComponent] = None
    # data type: IdentificationtasksListMineCreatedAtErrorComponent
    oneof_schema_4_validator: Optional[IdentificationtasksListMineCreatedAtErrorComponent] = None
    # data type: IdentificationtasksListMineUpdatedAtErrorComponent
    oneof_schema_5_validator: Optional[IdentificationtasksListMineUpdatedAtErrorComponent] = None
    # data type: IdentificationtasksListMineOrderByErrorComponent
    oneof_schema_6_validator: Optional[IdentificationtasksListMineOrderByErrorComponent] = None
    # data type: IdentificationtasksListMineStatusErrorComponent
    oneof_schema_7_validator: Optional[IdentificationtasksListMineStatusErrorComponent] = None
    # data type: IdentificationtasksListMineObservationCountryIdsErrorComponent
    oneof_schema_8_validator: Optional[IdentificationtasksListMineObservationCountryIdsErrorComponent] = None
    # data type: IdentificationtasksListMineResultTaxonIdsErrorComponent
    oneof_schema_9_validator: Optional[IdentificationtasksListMineResultTaxonIdsErrorComponent] = None
    # data type: IdentificationtasksListMineResultConfidenceErrorComponent
    oneof_schema_10_validator: Optional[IdentificationtasksListMineResultConfidenceErrorComponent] = None
    # data type: IdentificationtasksListMineResultUncertaintyErrorComponent
    oneof_schema_11_validator: Optional[IdentificationtasksListMineResultUncertaintyErrorComponent] = None
    # data type: IdentificationtasksListMineResultAgreementErrorComponent
    oneof_schema_12_validator: Optional[IdentificationtasksListMineResultAgreementErrorComponent] = None
    # data type: IdentificationtasksListMineResultSourceErrorComponent
    oneof_schema_13_validator: Optional[IdentificationtasksListMineResultSourceErrorComponent] = None
    # data type: IdentificationtasksListMineReviewActionErrorComponent
    oneof_schema_14_validator: Optional[IdentificationtasksListMineReviewActionErrorComponent] = None
    actual_instance: Optional[Union[IdentificationtasksListMineAnnotatorIdsErrorComponent, IdentificationtasksListMineAssigneeIdsErrorComponent, IdentificationtasksListMineCreatedAtErrorComponent, IdentificationtasksListMineNumAnnotationsErrorComponent, IdentificationtasksListMineObservationCountryIdsErrorComponent, IdentificationtasksListMineOrderByErrorComponent, IdentificationtasksListMineResultAgreementErrorComponent, IdentificationtasksListMineResultConfidenceErrorComponent, IdentificationtasksListMineResultSourceErrorComponent, IdentificationtasksListMineResultTaxonIdsErrorComponent, IdentificationtasksListMineResultUncertaintyErrorComponent, IdentificationtasksListMineReviewActionErrorComponent, IdentificationtasksListMineStatusErrorComponent, IdentificationtasksListMineUpdatedAtErrorComponent]] = None
    one_of_schemas: Set[str] = { "IdentificationtasksListMineAnnotatorIdsErrorComponent", "IdentificationtasksListMineAssigneeIdsErrorComponent", "IdentificationtasksListMineCreatedAtErrorComponent", "IdentificationtasksListMineNumAnnotationsErrorComponent", "IdentificationtasksListMineObservationCountryIdsErrorComponent", "IdentificationtasksListMineOrderByErrorComponent", "IdentificationtasksListMineResultAgreementErrorComponent", "IdentificationtasksListMineResultConfidenceErrorComponent", "IdentificationtasksListMineResultSourceErrorComponent", "IdentificationtasksListMineResultTaxonIdsErrorComponent", "IdentificationtasksListMineResultUncertaintyErrorComponent", "IdentificationtasksListMineReviewActionErrorComponent", "IdentificationtasksListMineStatusErrorComponent", "IdentificationtasksListMineUpdatedAtErrorComponent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = IdentificationtasksListMineError.model_construct()
        error_messages = []
        match = 0
        # validate data type: IdentificationtasksListMineAnnotatorIdsErrorComponent
        if not isinstance(v, IdentificationtasksListMineAnnotatorIdsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListMineAnnotatorIdsErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListMineAssigneeIdsErrorComponent
        if not isinstance(v, IdentificationtasksListMineAssigneeIdsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListMineAssigneeIdsErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListMineNumAnnotationsErrorComponent
        if not isinstance(v, IdentificationtasksListMineNumAnnotationsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListMineNumAnnotationsErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListMineCreatedAtErrorComponent
        if not isinstance(v, IdentificationtasksListMineCreatedAtErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListMineCreatedAtErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListMineUpdatedAtErrorComponent
        if not isinstance(v, IdentificationtasksListMineUpdatedAtErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListMineUpdatedAtErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListMineOrderByErrorComponent
        if not isinstance(v, IdentificationtasksListMineOrderByErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListMineOrderByErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListMineStatusErrorComponent
        if not isinstance(v, IdentificationtasksListMineStatusErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListMineStatusErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListMineObservationCountryIdsErrorComponent
        if not isinstance(v, IdentificationtasksListMineObservationCountryIdsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListMineObservationCountryIdsErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListMineResultTaxonIdsErrorComponent
        if not isinstance(v, IdentificationtasksListMineResultTaxonIdsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListMineResultTaxonIdsErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListMineResultConfidenceErrorComponent
        if not isinstance(v, IdentificationtasksListMineResultConfidenceErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListMineResultConfidenceErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListMineResultUncertaintyErrorComponent
        if not isinstance(v, IdentificationtasksListMineResultUncertaintyErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListMineResultUncertaintyErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListMineResultAgreementErrorComponent
        if not isinstance(v, IdentificationtasksListMineResultAgreementErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListMineResultAgreementErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListMineResultSourceErrorComponent
        if not isinstance(v, IdentificationtasksListMineResultSourceErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListMineResultSourceErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksListMineReviewActionErrorComponent
        if not isinstance(v, IdentificationtasksListMineReviewActionErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksListMineReviewActionErrorComponent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in IdentificationtasksListMineError with oneOf schemas: IdentificationtasksListMineAnnotatorIdsErrorComponent, IdentificationtasksListMineAssigneeIdsErrorComponent, IdentificationtasksListMineCreatedAtErrorComponent, IdentificationtasksListMineNumAnnotationsErrorComponent, IdentificationtasksListMineObservationCountryIdsErrorComponent, IdentificationtasksListMineOrderByErrorComponent, IdentificationtasksListMineResultAgreementErrorComponent, IdentificationtasksListMineResultConfidenceErrorComponent, IdentificationtasksListMineResultSourceErrorComponent, IdentificationtasksListMineResultTaxonIdsErrorComponent, IdentificationtasksListMineResultUncertaintyErrorComponent, IdentificationtasksListMineReviewActionErrorComponent, IdentificationtasksListMineStatusErrorComponent, IdentificationtasksListMineUpdatedAtErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in IdentificationtasksListMineError with oneOf schemas: IdentificationtasksListMineAnnotatorIdsErrorComponent, IdentificationtasksListMineAssigneeIdsErrorComponent, IdentificationtasksListMineCreatedAtErrorComponent, IdentificationtasksListMineNumAnnotationsErrorComponent, IdentificationtasksListMineObservationCountryIdsErrorComponent, IdentificationtasksListMineOrderByErrorComponent, IdentificationtasksListMineResultAgreementErrorComponent, IdentificationtasksListMineResultConfidenceErrorComponent, IdentificationtasksListMineResultSourceErrorComponent, IdentificationtasksListMineResultTaxonIdsErrorComponent, IdentificationtasksListMineResultUncertaintyErrorComponent, IdentificationtasksListMineReviewActionErrorComponent, IdentificationtasksListMineStatusErrorComponent, IdentificationtasksListMineUpdatedAtErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into IdentificationtasksListMineAnnotatorIdsErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListMineAnnotatorIdsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListMineAssigneeIdsErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListMineAssigneeIdsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListMineNumAnnotationsErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListMineNumAnnotationsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListMineCreatedAtErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListMineCreatedAtErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListMineUpdatedAtErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListMineUpdatedAtErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListMineOrderByErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListMineOrderByErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListMineStatusErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListMineStatusErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListMineObservationCountryIdsErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListMineObservationCountryIdsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListMineResultTaxonIdsErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListMineResultTaxonIdsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListMineResultConfidenceErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListMineResultConfidenceErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListMineResultUncertaintyErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListMineResultUncertaintyErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListMineResultAgreementErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListMineResultAgreementErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListMineResultSourceErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListMineResultSourceErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksListMineReviewActionErrorComponent
        try:
            instance.actual_instance = IdentificationtasksListMineReviewActionErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into IdentificationtasksListMineError with oneOf schemas: IdentificationtasksListMineAnnotatorIdsErrorComponent, IdentificationtasksListMineAssigneeIdsErrorComponent, IdentificationtasksListMineCreatedAtErrorComponent, IdentificationtasksListMineNumAnnotationsErrorComponent, IdentificationtasksListMineObservationCountryIdsErrorComponent, IdentificationtasksListMineOrderByErrorComponent, IdentificationtasksListMineResultAgreementErrorComponent, IdentificationtasksListMineResultConfidenceErrorComponent, IdentificationtasksListMineResultSourceErrorComponent, IdentificationtasksListMineResultTaxonIdsErrorComponent, IdentificationtasksListMineResultUncertaintyErrorComponent, IdentificationtasksListMineReviewActionErrorComponent, IdentificationtasksListMineStatusErrorComponent, IdentificationtasksListMineUpdatedAtErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into IdentificationtasksListMineError with oneOf schemas: IdentificationtasksListMineAnnotatorIdsErrorComponent, IdentificationtasksListMineAssigneeIdsErrorComponent, IdentificationtasksListMineCreatedAtErrorComponent, IdentificationtasksListMineNumAnnotationsErrorComponent, IdentificationtasksListMineObservationCountryIdsErrorComponent, IdentificationtasksListMineOrderByErrorComponent, IdentificationtasksListMineResultAgreementErrorComponent, IdentificationtasksListMineResultConfidenceErrorComponent, IdentificationtasksListMineResultSourceErrorComponent, IdentificationtasksListMineResultTaxonIdsErrorComponent, IdentificationtasksListMineResultUncertaintyErrorComponent, IdentificationtasksListMineReviewActionErrorComponent, IdentificationtasksListMineStatusErrorComponent, IdentificationtasksListMineUpdatedAtErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], IdentificationtasksListMineAnnotatorIdsErrorComponent, IdentificationtasksListMineAssigneeIdsErrorComponent, IdentificationtasksListMineCreatedAtErrorComponent, IdentificationtasksListMineNumAnnotationsErrorComponent, IdentificationtasksListMineObservationCountryIdsErrorComponent, IdentificationtasksListMineOrderByErrorComponent, IdentificationtasksListMineResultAgreementErrorComponent, IdentificationtasksListMineResultConfidenceErrorComponent, IdentificationtasksListMineResultSourceErrorComponent, IdentificationtasksListMineResultTaxonIdsErrorComponent, IdentificationtasksListMineResultUncertaintyErrorComponent, IdentificationtasksListMineReviewActionErrorComponent, IdentificationtasksListMineStatusErrorComponent, IdentificationtasksListMineUpdatedAtErrorComponent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


