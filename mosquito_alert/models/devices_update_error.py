# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from mosquito_alert.models.devices_update_fcm_token_error_component import DevicesUpdateFcmTokenErrorComponent
from mosquito_alert.models.devices_update_mobile_app_non_field_errors_error_component import DevicesUpdateMobileAppNonFieldErrorsErrorComponent
from mosquito_alert.models.devices_update_mobile_app_package_name_error_component import DevicesUpdateMobileAppPackageNameErrorComponent
from mosquito_alert.models.devices_update_mobile_app_package_version_error_component import DevicesUpdateMobileAppPackageVersionErrorComponent
from mosquito_alert.models.devices_update_name_error_component import DevicesUpdateNameErrorComponent
from mosquito_alert.models.devices_update_non_field_errors_error_component import DevicesUpdateNonFieldErrorsErrorComponent
from mosquito_alert.models.devices_update_os_locale_error_component import DevicesUpdateOsLocaleErrorComponent
from mosquito_alert.models.devices_update_os_name_error_component import DevicesUpdateOsNameErrorComponent
from mosquito_alert.models.devices_update_os_non_field_errors_error_component import DevicesUpdateOsNonFieldErrorsErrorComponent
from mosquito_alert.models.devices_update_os_version_error_component import DevicesUpdateOsVersionErrorComponent
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

DEVICESUPDATEERROR_ONE_OF_SCHEMAS = ["DevicesUpdateFcmTokenErrorComponent", "DevicesUpdateMobileAppNonFieldErrorsErrorComponent", "DevicesUpdateMobileAppPackageNameErrorComponent", "DevicesUpdateMobileAppPackageVersionErrorComponent", "DevicesUpdateNameErrorComponent", "DevicesUpdateNonFieldErrorsErrorComponent", "DevicesUpdateOsLocaleErrorComponent", "DevicesUpdateOsNameErrorComponent", "DevicesUpdateOsNonFieldErrorsErrorComponent", "DevicesUpdateOsVersionErrorComponent"]

class DevicesUpdateError(BaseModel):
    """
    DevicesUpdateError
    """
    # data type: DevicesUpdateNonFieldErrorsErrorComponent
    oneof_schema_1_validator: Optional[DevicesUpdateNonFieldErrorsErrorComponent] = None
    # data type: DevicesUpdateNameErrorComponent
    oneof_schema_2_validator: Optional[DevicesUpdateNameErrorComponent] = None
    # data type: DevicesUpdateFcmTokenErrorComponent
    oneof_schema_3_validator: Optional[DevicesUpdateFcmTokenErrorComponent] = None
    # data type: DevicesUpdateOsNonFieldErrorsErrorComponent
    oneof_schema_4_validator: Optional[DevicesUpdateOsNonFieldErrorsErrorComponent] = None
    # data type: DevicesUpdateOsNameErrorComponent
    oneof_schema_5_validator: Optional[DevicesUpdateOsNameErrorComponent] = None
    # data type: DevicesUpdateOsVersionErrorComponent
    oneof_schema_6_validator: Optional[DevicesUpdateOsVersionErrorComponent] = None
    # data type: DevicesUpdateOsLocaleErrorComponent
    oneof_schema_7_validator: Optional[DevicesUpdateOsLocaleErrorComponent] = None
    # data type: DevicesUpdateMobileAppNonFieldErrorsErrorComponent
    oneof_schema_8_validator: Optional[DevicesUpdateMobileAppNonFieldErrorsErrorComponent] = None
    # data type: DevicesUpdateMobileAppPackageNameErrorComponent
    oneof_schema_9_validator: Optional[DevicesUpdateMobileAppPackageNameErrorComponent] = None
    # data type: DevicesUpdateMobileAppPackageVersionErrorComponent
    oneof_schema_10_validator: Optional[DevicesUpdateMobileAppPackageVersionErrorComponent] = None
    actual_instance: Optional[Union[DevicesUpdateFcmTokenErrorComponent, DevicesUpdateMobileAppNonFieldErrorsErrorComponent, DevicesUpdateMobileAppPackageNameErrorComponent, DevicesUpdateMobileAppPackageVersionErrorComponent, DevicesUpdateNameErrorComponent, DevicesUpdateNonFieldErrorsErrorComponent, DevicesUpdateOsLocaleErrorComponent, DevicesUpdateOsNameErrorComponent, DevicesUpdateOsNonFieldErrorsErrorComponent, DevicesUpdateOsVersionErrorComponent]] = None
    one_of_schemas: Set[str] = { "DevicesUpdateFcmTokenErrorComponent", "DevicesUpdateMobileAppNonFieldErrorsErrorComponent", "DevicesUpdateMobileAppPackageNameErrorComponent", "DevicesUpdateMobileAppPackageVersionErrorComponent", "DevicesUpdateNameErrorComponent", "DevicesUpdateNonFieldErrorsErrorComponent", "DevicesUpdateOsLocaleErrorComponent", "DevicesUpdateOsNameErrorComponent", "DevicesUpdateOsNonFieldErrorsErrorComponent", "DevicesUpdateOsVersionErrorComponent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = DevicesUpdateError.model_construct()
        error_messages = []
        match = 0
        # validate data type: DevicesUpdateNonFieldErrorsErrorComponent
        if not isinstance(v, DevicesUpdateNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesUpdateNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesUpdateNameErrorComponent
        if not isinstance(v, DevicesUpdateNameErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesUpdateNameErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesUpdateFcmTokenErrorComponent
        if not isinstance(v, DevicesUpdateFcmTokenErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesUpdateFcmTokenErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesUpdateOsNonFieldErrorsErrorComponent
        if not isinstance(v, DevicesUpdateOsNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesUpdateOsNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesUpdateOsNameErrorComponent
        if not isinstance(v, DevicesUpdateOsNameErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesUpdateOsNameErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesUpdateOsVersionErrorComponent
        if not isinstance(v, DevicesUpdateOsVersionErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesUpdateOsVersionErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesUpdateOsLocaleErrorComponent
        if not isinstance(v, DevicesUpdateOsLocaleErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesUpdateOsLocaleErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesUpdateMobileAppNonFieldErrorsErrorComponent
        if not isinstance(v, DevicesUpdateMobileAppNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesUpdateMobileAppNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesUpdateMobileAppPackageNameErrorComponent
        if not isinstance(v, DevicesUpdateMobileAppPackageNameErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesUpdateMobileAppPackageNameErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesUpdateMobileAppPackageVersionErrorComponent
        if not isinstance(v, DevicesUpdateMobileAppPackageVersionErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesUpdateMobileAppPackageVersionErrorComponent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in DevicesUpdateError with oneOf schemas: DevicesUpdateFcmTokenErrorComponent, DevicesUpdateMobileAppNonFieldErrorsErrorComponent, DevicesUpdateMobileAppPackageNameErrorComponent, DevicesUpdateMobileAppPackageVersionErrorComponent, DevicesUpdateNameErrorComponent, DevicesUpdateNonFieldErrorsErrorComponent, DevicesUpdateOsLocaleErrorComponent, DevicesUpdateOsNameErrorComponent, DevicesUpdateOsNonFieldErrorsErrorComponent, DevicesUpdateOsVersionErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in DevicesUpdateError with oneOf schemas: DevicesUpdateFcmTokenErrorComponent, DevicesUpdateMobileAppNonFieldErrorsErrorComponent, DevicesUpdateMobileAppPackageNameErrorComponent, DevicesUpdateMobileAppPackageVersionErrorComponent, DevicesUpdateNameErrorComponent, DevicesUpdateNonFieldErrorsErrorComponent, DevicesUpdateOsLocaleErrorComponent, DevicesUpdateOsNameErrorComponent, DevicesUpdateOsNonFieldErrorsErrorComponent, DevicesUpdateOsVersionErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into DevicesUpdateNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = DevicesUpdateNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesUpdateNameErrorComponent
        try:
            instance.actual_instance = DevicesUpdateNameErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesUpdateFcmTokenErrorComponent
        try:
            instance.actual_instance = DevicesUpdateFcmTokenErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesUpdateOsNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = DevicesUpdateOsNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesUpdateOsNameErrorComponent
        try:
            instance.actual_instance = DevicesUpdateOsNameErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesUpdateOsVersionErrorComponent
        try:
            instance.actual_instance = DevicesUpdateOsVersionErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesUpdateOsLocaleErrorComponent
        try:
            instance.actual_instance = DevicesUpdateOsLocaleErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesUpdateMobileAppNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = DevicesUpdateMobileAppNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesUpdateMobileAppPackageNameErrorComponent
        try:
            instance.actual_instance = DevicesUpdateMobileAppPackageNameErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesUpdateMobileAppPackageVersionErrorComponent
        try:
            instance.actual_instance = DevicesUpdateMobileAppPackageVersionErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into DevicesUpdateError with oneOf schemas: DevicesUpdateFcmTokenErrorComponent, DevicesUpdateMobileAppNonFieldErrorsErrorComponent, DevicesUpdateMobileAppPackageNameErrorComponent, DevicesUpdateMobileAppPackageVersionErrorComponent, DevicesUpdateNameErrorComponent, DevicesUpdateNonFieldErrorsErrorComponent, DevicesUpdateOsLocaleErrorComponent, DevicesUpdateOsNameErrorComponent, DevicesUpdateOsNonFieldErrorsErrorComponent, DevicesUpdateOsVersionErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into DevicesUpdateError with oneOf schemas: DevicesUpdateFcmTokenErrorComponent, DevicesUpdateMobileAppNonFieldErrorsErrorComponent, DevicesUpdateMobileAppPackageNameErrorComponent, DevicesUpdateMobileAppPackageVersionErrorComponent, DevicesUpdateNameErrorComponent, DevicesUpdateNonFieldErrorsErrorComponent, DevicesUpdateOsLocaleErrorComponent, DevicesUpdateOsNameErrorComponent, DevicesUpdateOsNonFieldErrorsErrorComponent, DevicesUpdateOsVersionErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], DevicesUpdateFcmTokenErrorComponent, DevicesUpdateMobileAppNonFieldErrorsErrorComponent, DevicesUpdateMobileAppPackageNameErrorComponent, DevicesUpdateMobileAppPackageVersionErrorComponent, DevicesUpdateNameErrorComponent, DevicesUpdateNonFieldErrorsErrorComponent, DevicesUpdateOsLocaleErrorComponent, DevicesUpdateOsNameErrorComponent, DevicesUpdateOsNonFieldErrorsErrorComponent, DevicesUpdateOsVersionErrorComponent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


