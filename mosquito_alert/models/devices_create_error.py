# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from mosquito_alert.models.devices_create_device_id_error_component import DevicesCreateDeviceIdErrorComponent
from mosquito_alert.models.devices_create_fcm_token_error_component import DevicesCreateFcmTokenErrorComponent
from mosquito_alert.models.devices_create_manufacturer_error_component import DevicesCreateManufacturerErrorComponent
from mosquito_alert.models.devices_create_mobile_app_non_field_errors_error_component import DevicesCreateMobileAppNonFieldErrorsErrorComponent
from mosquito_alert.models.devices_create_mobile_app_package_name_error_component import DevicesCreateMobileAppPackageNameErrorComponent
from mosquito_alert.models.devices_create_mobile_app_package_version_error_component import DevicesCreateMobileAppPackageVersionErrorComponent
from mosquito_alert.models.devices_create_model_error_component import DevicesCreateModelErrorComponent
from mosquito_alert.models.devices_create_name_error_component import DevicesCreateNameErrorComponent
from mosquito_alert.models.devices_create_non_field_errors_error_component import DevicesCreateNonFieldErrorsErrorComponent
from mosquito_alert.models.devices_create_os_locale_error_component import DevicesCreateOsLocaleErrorComponent
from mosquito_alert.models.devices_create_os_name_error_component import DevicesCreateOsNameErrorComponent
from mosquito_alert.models.devices_create_os_non_field_errors_error_component import DevicesCreateOsNonFieldErrorsErrorComponent
from mosquito_alert.models.devices_create_os_version_error_component import DevicesCreateOsVersionErrorComponent
from mosquito_alert.models.devices_create_type_error_component import DevicesCreateTypeErrorComponent
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

DEVICESCREATEERROR_ONE_OF_SCHEMAS = ["DevicesCreateDeviceIdErrorComponent", "DevicesCreateFcmTokenErrorComponent", "DevicesCreateManufacturerErrorComponent", "DevicesCreateMobileAppNonFieldErrorsErrorComponent", "DevicesCreateMobileAppPackageNameErrorComponent", "DevicesCreateMobileAppPackageVersionErrorComponent", "DevicesCreateModelErrorComponent", "DevicesCreateNameErrorComponent", "DevicesCreateNonFieldErrorsErrorComponent", "DevicesCreateOsLocaleErrorComponent", "DevicesCreateOsNameErrorComponent", "DevicesCreateOsNonFieldErrorsErrorComponent", "DevicesCreateOsVersionErrorComponent", "DevicesCreateTypeErrorComponent"]

class DevicesCreateError(BaseModel):
    """
    DevicesCreateError
    """
    # data type: DevicesCreateNonFieldErrorsErrorComponent
    oneof_schema_1_validator: Optional[DevicesCreateNonFieldErrorsErrorComponent] = None
    # data type: DevicesCreateDeviceIdErrorComponent
    oneof_schema_2_validator: Optional[DevicesCreateDeviceIdErrorComponent] = None
    # data type: DevicesCreateNameErrorComponent
    oneof_schema_3_validator: Optional[DevicesCreateNameErrorComponent] = None
    # data type: DevicesCreateFcmTokenErrorComponent
    oneof_schema_4_validator: Optional[DevicesCreateFcmTokenErrorComponent] = None
    # data type: DevicesCreateTypeErrorComponent
    oneof_schema_5_validator: Optional[DevicesCreateTypeErrorComponent] = None
    # data type: DevicesCreateManufacturerErrorComponent
    oneof_schema_6_validator: Optional[DevicesCreateManufacturerErrorComponent] = None
    # data type: DevicesCreateModelErrorComponent
    oneof_schema_7_validator: Optional[DevicesCreateModelErrorComponent] = None
    # data type: DevicesCreateOsNonFieldErrorsErrorComponent
    oneof_schema_8_validator: Optional[DevicesCreateOsNonFieldErrorsErrorComponent] = None
    # data type: DevicesCreateOsNameErrorComponent
    oneof_schema_9_validator: Optional[DevicesCreateOsNameErrorComponent] = None
    # data type: DevicesCreateOsVersionErrorComponent
    oneof_schema_10_validator: Optional[DevicesCreateOsVersionErrorComponent] = None
    # data type: DevicesCreateOsLocaleErrorComponent
    oneof_schema_11_validator: Optional[DevicesCreateOsLocaleErrorComponent] = None
    # data type: DevicesCreateMobileAppNonFieldErrorsErrorComponent
    oneof_schema_12_validator: Optional[DevicesCreateMobileAppNonFieldErrorsErrorComponent] = None
    # data type: DevicesCreateMobileAppPackageNameErrorComponent
    oneof_schema_13_validator: Optional[DevicesCreateMobileAppPackageNameErrorComponent] = None
    # data type: DevicesCreateMobileAppPackageVersionErrorComponent
    oneof_schema_14_validator: Optional[DevicesCreateMobileAppPackageVersionErrorComponent] = None
    actual_instance: Optional[Union[DevicesCreateDeviceIdErrorComponent, DevicesCreateFcmTokenErrorComponent, DevicesCreateManufacturerErrorComponent, DevicesCreateMobileAppNonFieldErrorsErrorComponent, DevicesCreateMobileAppPackageNameErrorComponent, DevicesCreateMobileAppPackageVersionErrorComponent, DevicesCreateModelErrorComponent, DevicesCreateNameErrorComponent, DevicesCreateNonFieldErrorsErrorComponent, DevicesCreateOsLocaleErrorComponent, DevicesCreateOsNameErrorComponent, DevicesCreateOsNonFieldErrorsErrorComponent, DevicesCreateOsVersionErrorComponent, DevicesCreateTypeErrorComponent]] = None
    one_of_schemas: Set[str] = { "DevicesCreateDeviceIdErrorComponent", "DevicesCreateFcmTokenErrorComponent", "DevicesCreateManufacturerErrorComponent", "DevicesCreateMobileAppNonFieldErrorsErrorComponent", "DevicesCreateMobileAppPackageNameErrorComponent", "DevicesCreateMobileAppPackageVersionErrorComponent", "DevicesCreateModelErrorComponent", "DevicesCreateNameErrorComponent", "DevicesCreateNonFieldErrorsErrorComponent", "DevicesCreateOsLocaleErrorComponent", "DevicesCreateOsNameErrorComponent", "DevicesCreateOsNonFieldErrorsErrorComponent", "DevicesCreateOsVersionErrorComponent", "DevicesCreateTypeErrorComponent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = DevicesCreateError.model_construct()
        error_messages = []
        match = 0
        # validate data type: DevicesCreateNonFieldErrorsErrorComponent
        if not isinstance(v, DevicesCreateNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesCreateNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesCreateDeviceIdErrorComponent
        if not isinstance(v, DevicesCreateDeviceIdErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesCreateDeviceIdErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesCreateNameErrorComponent
        if not isinstance(v, DevicesCreateNameErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesCreateNameErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesCreateFcmTokenErrorComponent
        if not isinstance(v, DevicesCreateFcmTokenErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesCreateFcmTokenErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesCreateTypeErrorComponent
        if not isinstance(v, DevicesCreateTypeErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesCreateTypeErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesCreateManufacturerErrorComponent
        if not isinstance(v, DevicesCreateManufacturerErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesCreateManufacturerErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesCreateModelErrorComponent
        if not isinstance(v, DevicesCreateModelErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesCreateModelErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesCreateOsNonFieldErrorsErrorComponent
        if not isinstance(v, DevicesCreateOsNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesCreateOsNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesCreateOsNameErrorComponent
        if not isinstance(v, DevicesCreateOsNameErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesCreateOsNameErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesCreateOsVersionErrorComponent
        if not isinstance(v, DevicesCreateOsVersionErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesCreateOsVersionErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesCreateOsLocaleErrorComponent
        if not isinstance(v, DevicesCreateOsLocaleErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesCreateOsLocaleErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesCreateMobileAppNonFieldErrorsErrorComponent
        if not isinstance(v, DevicesCreateMobileAppNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesCreateMobileAppNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesCreateMobileAppPackageNameErrorComponent
        if not isinstance(v, DevicesCreateMobileAppPackageNameErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesCreateMobileAppPackageNameErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesCreateMobileAppPackageVersionErrorComponent
        if not isinstance(v, DevicesCreateMobileAppPackageVersionErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesCreateMobileAppPackageVersionErrorComponent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in DevicesCreateError with oneOf schemas: DevicesCreateDeviceIdErrorComponent, DevicesCreateFcmTokenErrorComponent, DevicesCreateManufacturerErrorComponent, DevicesCreateMobileAppNonFieldErrorsErrorComponent, DevicesCreateMobileAppPackageNameErrorComponent, DevicesCreateMobileAppPackageVersionErrorComponent, DevicesCreateModelErrorComponent, DevicesCreateNameErrorComponent, DevicesCreateNonFieldErrorsErrorComponent, DevicesCreateOsLocaleErrorComponent, DevicesCreateOsNameErrorComponent, DevicesCreateOsNonFieldErrorsErrorComponent, DevicesCreateOsVersionErrorComponent, DevicesCreateTypeErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in DevicesCreateError with oneOf schemas: DevicesCreateDeviceIdErrorComponent, DevicesCreateFcmTokenErrorComponent, DevicesCreateManufacturerErrorComponent, DevicesCreateMobileAppNonFieldErrorsErrorComponent, DevicesCreateMobileAppPackageNameErrorComponent, DevicesCreateMobileAppPackageVersionErrorComponent, DevicesCreateModelErrorComponent, DevicesCreateNameErrorComponent, DevicesCreateNonFieldErrorsErrorComponent, DevicesCreateOsLocaleErrorComponent, DevicesCreateOsNameErrorComponent, DevicesCreateOsNonFieldErrorsErrorComponent, DevicesCreateOsVersionErrorComponent, DevicesCreateTypeErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into DevicesCreateNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = DevicesCreateNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesCreateDeviceIdErrorComponent
        try:
            instance.actual_instance = DevicesCreateDeviceIdErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesCreateNameErrorComponent
        try:
            instance.actual_instance = DevicesCreateNameErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesCreateFcmTokenErrorComponent
        try:
            instance.actual_instance = DevicesCreateFcmTokenErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesCreateTypeErrorComponent
        try:
            instance.actual_instance = DevicesCreateTypeErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesCreateManufacturerErrorComponent
        try:
            instance.actual_instance = DevicesCreateManufacturerErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesCreateModelErrorComponent
        try:
            instance.actual_instance = DevicesCreateModelErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesCreateOsNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = DevicesCreateOsNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesCreateOsNameErrorComponent
        try:
            instance.actual_instance = DevicesCreateOsNameErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesCreateOsVersionErrorComponent
        try:
            instance.actual_instance = DevicesCreateOsVersionErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesCreateOsLocaleErrorComponent
        try:
            instance.actual_instance = DevicesCreateOsLocaleErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesCreateMobileAppNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = DevicesCreateMobileAppNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesCreateMobileAppPackageNameErrorComponent
        try:
            instance.actual_instance = DevicesCreateMobileAppPackageNameErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesCreateMobileAppPackageVersionErrorComponent
        try:
            instance.actual_instance = DevicesCreateMobileAppPackageVersionErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into DevicesCreateError with oneOf schemas: DevicesCreateDeviceIdErrorComponent, DevicesCreateFcmTokenErrorComponent, DevicesCreateManufacturerErrorComponent, DevicesCreateMobileAppNonFieldErrorsErrorComponent, DevicesCreateMobileAppPackageNameErrorComponent, DevicesCreateMobileAppPackageVersionErrorComponent, DevicesCreateModelErrorComponent, DevicesCreateNameErrorComponent, DevicesCreateNonFieldErrorsErrorComponent, DevicesCreateOsLocaleErrorComponent, DevicesCreateOsNameErrorComponent, DevicesCreateOsNonFieldErrorsErrorComponent, DevicesCreateOsVersionErrorComponent, DevicesCreateTypeErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into DevicesCreateError with oneOf schemas: DevicesCreateDeviceIdErrorComponent, DevicesCreateFcmTokenErrorComponent, DevicesCreateManufacturerErrorComponent, DevicesCreateMobileAppNonFieldErrorsErrorComponent, DevicesCreateMobileAppPackageNameErrorComponent, DevicesCreateMobileAppPackageVersionErrorComponent, DevicesCreateModelErrorComponent, DevicesCreateNameErrorComponent, DevicesCreateNonFieldErrorsErrorComponent, DevicesCreateOsLocaleErrorComponent, DevicesCreateOsNameErrorComponent, DevicesCreateOsNonFieldErrorsErrorComponent, DevicesCreateOsVersionErrorComponent, DevicesCreateTypeErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], DevicesCreateDeviceIdErrorComponent, DevicesCreateFcmTokenErrorComponent, DevicesCreateManufacturerErrorComponent, DevicesCreateMobileAppNonFieldErrorsErrorComponent, DevicesCreateMobileAppPackageNameErrorComponent, DevicesCreateMobileAppPackageVersionErrorComponent, DevicesCreateModelErrorComponent, DevicesCreateNameErrorComponent, DevicesCreateNonFieldErrorsErrorComponent, DevicesCreateOsLocaleErrorComponent, DevicesCreateOsNameErrorComponent, DevicesCreateOsNonFieldErrorsErrorComponent, DevicesCreateOsVersionErrorComponent, DevicesCreateTypeErrorComponent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


