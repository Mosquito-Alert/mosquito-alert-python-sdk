# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from mosquito_alert.models.devices_partial_update_fcm_token_error_component import DevicesPartialUpdateFcmTokenErrorComponent
from mosquito_alert.models.devices_partial_update_mobile_app_non_field_errors_error_component import DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent
from mosquito_alert.models.devices_partial_update_mobile_app_package_name_error_component import DevicesPartialUpdateMobileAppPackageNameErrorComponent
from mosquito_alert.models.devices_partial_update_mobile_app_package_version_error_component import DevicesPartialUpdateMobileAppPackageVersionErrorComponent
from mosquito_alert.models.devices_partial_update_name_error_component import DevicesPartialUpdateNameErrorComponent
from mosquito_alert.models.devices_partial_update_non_field_errors_error_component import DevicesPartialUpdateNonFieldErrorsErrorComponent
from mosquito_alert.models.devices_partial_update_os_locale_error_component import DevicesPartialUpdateOsLocaleErrorComponent
from mosquito_alert.models.devices_partial_update_os_name_error_component import DevicesPartialUpdateOsNameErrorComponent
from mosquito_alert.models.devices_partial_update_os_non_field_errors_error_component import DevicesPartialUpdateOsNonFieldErrorsErrorComponent
from mosquito_alert.models.devices_partial_update_os_version_error_component import DevicesPartialUpdateOsVersionErrorComponent
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

DEVICESPARTIALUPDATEERROR_ONE_OF_SCHEMAS = ["DevicesPartialUpdateFcmTokenErrorComponent", "DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent", "DevicesPartialUpdateMobileAppPackageNameErrorComponent", "DevicesPartialUpdateMobileAppPackageVersionErrorComponent", "DevicesPartialUpdateNameErrorComponent", "DevicesPartialUpdateNonFieldErrorsErrorComponent", "DevicesPartialUpdateOsLocaleErrorComponent", "DevicesPartialUpdateOsNameErrorComponent", "DevicesPartialUpdateOsNonFieldErrorsErrorComponent", "DevicesPartialUpdateOsVersionErrorComponent"]

class DevicesPartialUpdateError(BaseModel):
    """
    DevicesPartialUpdateError
    """
    # data type: DevicesPartialUpdateNonFieldErrorsErrorComponent
    oneof_schema_1_validator: Optional[DevicesPartialUpdateNonFieldErrorsErrorComponent] = None
    # data type: DevicesPartialUpdateNameErrorComponent
    oneof_schema_2_validator: Optional[DevicesPartialUpdateNameErrorComponent] = None
    # data type: DevicesPartialUpdateFcmTokenErrorComponent
    oneof_schema_3_validator: Optional[DevicesPartialUpdateFcmTokenErrorComponent] = None
    # data type: DevicesPartialUpdateOsNonFieldErrorsErrorComponent
    oneof_schema_4_validator: Optional[DevicesPartialUpdateOsNonFieldErrorsErrorComponent] = None
    # data type: DevicesPartialUpdateOsNameErrorComponent
    oneof_schema_5_validator: Optional[DevicesPartialUpdateOsNameErrorComponent] = None
    # data type: DevicesPartialUpdateOsVersionErrorComponent
    oneof_schema_6_validator: Optional[DevicesPartialUpdateOsVersionErrorComponent] = None
    # data type: DevicesPartialUpdateOsLocaleErrorComponent
    oneof_schema_7_validator: Optional[DevicesPartialUpdateOsLocaleErrorComponent] = None
    # data type: DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent
    oneof_schema_8_validator: Optional[DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent] = None
    # data type: DevicesPartialUpdateMobileAppPackageNameErrorComponent
    oneof_schema_9_validator: Optional[DevicesPartialUpdateMobileAppPackageNameErrorComponent] = None
    # data type: DevicesPartialUpdateMobileAppPackageVersionErrorComponent
    oneof_schema_10_validator: Optional[DevicesPartialUpdateMobileAppPackageVersionErrorComponent] = None
    actual_instance: Optional[Union[DevicesPartialUpdateFcmTokenErrorComponent, DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent, DevicesPartialUpdateMobileAppPackageNameErrorComponent, DevicesPartialUpdateMobileAppPackageVersionErrorComponent, DevicesPartialUpdateNameErrorComponent, DevicesPartialUpdateNonFieldErrorsErrorComponent, DevicesPartialUpdateOsLocaleErrorComponent, DevicesPartialUpdateOsNameErrorComponent, DevicesPartialUpdateOsNonFieldErrorsErrorComponent, DevicesPartialUpdateOsVersionErrorComponent]] = None
    one_of_schemas: Set[str] = { "DevicesPartialUpdateFcmTokenErrorComponent", "DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent", "DevicesPartialUpdateMobileAppPackageNameErrorComponent", "DevicesPartialUpdateMobileAppPackageVersionErrorComponent", "DevicesPartialUpdateNameErrorComponent", "DevicesPartialUpdateNonFieldErrorsErrorComponent", "DevicesPartialUpdateOsLocaleErrorComponent", "DevicesPartialUpdateOsNameErrorComponent", "DevicesPartialUpdateOsNonFieldErrorsErrorComponent", "DevicesPartialUpdateOsVersionErrorComponent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = DevicesPartialUpdateError.model_construct()
        error_messages = []
        match = 0
        # validate data type: DevicesPartialUpdateNonFieldErrorsErrorComponent
        if not isinstance(v, DevicesPartialUpdateNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesPartialUpdateNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesPartialUpdateNameErrorComponent
        if not isinstance(v, DevicesPartialUpdateNameErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesPartialUpdateNameErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesPartialUpdateFcmTokenErrorComponent
        if not isinstance(v, DevicesPartialUpdateFcmTokenErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesPartialUpdateFcmTokenErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesPartialUpdateOsNonFieldErrorsErrorComponent
        if not isinstance(v, DevicesPartialUpdateOsNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesPartialUpdateOsNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesPartialUpdateOsNameErrorComponent
        if not isinstance(v, DevicesPartialUpdateOsNameErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesPartialUpdateOsNameErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesPartialUpdateOsVersionErrorComponent
        if not isinstance(v, DevicesPartialUpdateOsVersionErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesPartialUpdateOsVersionErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesPartialUpdateOsLocaleErrorComponent
        if not isinstance(v, DevicesPartialUpdateOsLocaleErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesPartialUpdateOsLocaleErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent
        if not isinstance(v, DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesPartialUpdateMobileAppPackageNameErrorComponent
        if not isinstance(v, DevicesPartialUpdateMobileAppPackageNameErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesPartialUpdateMobileAppPackageNameErrorComponent`")
        else:
            match += 1
        # validate data type: DevicesPartialUpdateMobileAppPackageVersionErrorComponent
        if not isinstance(v, DevicesPartialUpdateMobileAppPackageVersionErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesPartialUpdateMobileAppPackageVersionErrorComponent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in DevicesPartialUpdateError with oneOf schemas: DevicesPartialUpdateFcmTokenErrorComponent, DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent, DevicesPartialUpdateMobileAppPackageNameErrorComponent, DevicesPartialUpdateMobileAppPackageVersionErrorComponent, DevicesPartialUpdateNameErrorComponent, DevicesPartialUpdateNonFieldErrorsErrorComponent, DevicesPartialUpdateOsLocaleErrorComponent, DevicesPartialUpdateOsNameErrorComponent, DevicesPartialUpdateOsNonFieldErrorsErrorComponent, DevicesPartialUpdateOsVersionErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in DevicesPartialUpdateError with oneOf schemas: DevicesPartialUpdateFcmTokenErrorComponent, DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent, DevicesPartialUpdateMobileAppPackageNameErrorComponent, DevicesPartialUpdateMobileAppPackageVersionErrorComponent, DevicesPartialUpdateNameErrorComponent, DevicesPartialUpdateNonFieldErrorsErrorComponent, DevicesPartialUpdateOsLocaleErrorComponent, DevicesPartialUpdateOsNameErrorComponent, DevicesPartialUpdateOsNonFieldErrorsErrorComponent, DevicesPartialUpdateOsVersionErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into DevicesPartialUpdateNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = DevicesPartialUpdateNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesPartialUpdateNameErrorComponent
        try:
            instance.actual_instance = DevicesPartialUpdateNameErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesPartialUpdateFcmTokenErrorComponent
        try:
            instance.actual_instance = DevicesPartialUpdateFcmTokenErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesPartialUpdateOsNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = DevicesPartialUpdateOsNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesPartialUpdateOsNameErrorComponent
        try:
            instance.actual_instance = DevicesPartialUpdateOsNameErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesPartialUpdateOsVersionErrorComponent
        try:
            instance.actual_instance = DevicesPartialUpdateOsVersionErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesPartialUpdateOsLocaleErrorComponent
        try:
            instance.actual_instance = DevicesPartialUpdateOsLocaleErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesPartialUpdateMobileAppPackageNameErrorComponent
        try:
            instance.actual_instance = DevicesPartialUpdateMobileAppPackageNameErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesPartialUpdateMobileAppPackageVersionErrorComponent
        try:
            instance.actual_instance = DevicesPartialUpdateMobileAppPackageVersionErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into DevicesPartialUpdateError with oneOf schemas: DevicesPartialUpdateFcmTokenErrorComponent, DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent, DevicesPartialUpdateMobileAppPackageNameErrorComponent, DevicesPartialUpdateMobileAppPackageVersionErrorComponent, DevicesPartialUpdateNameErrorComponent, DevicesPartialUpdateNonFieldErrorsErrorComponent, DevicesPartialUpdateOsLocaleErrorComponent, DevicesPartialUpdateOsNameErrorComponent, DevicesPartialUpdateOsNonFieldErrorsErrorComponent, DevicesPartialUpdateOsVersionErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into DevicesPartialUpdateError with oneOf schemas: DevicesPartialUpdateFcmTokenErrorComponent, DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent, DevicesPartialUpdateMobileAppPackageNameErrorComponent, DevicesPartialUpdateMobileAppPackageVersionErrorComponent, DevicesPartialUpdateNameErrorComponent, DevicesPartialUpdateNonFieldErrorsErrorComponent, DevicesPartialUpdateOsLocaleErrorComponent, DevicesPartialUpdateOsNameErrorComponent, DevicesPartialUpdateOsNonFieldErrorsErrorComponent, DevicesPartialUpdateOsVersionErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], DevicesPartialUpdateFcmTokenErrorComponent, DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent, DevicesPartialUpdateMobileAppPackageNameErrorComponent, DevicesPartialUpdateMobileAppPackageVersionErrorComponent, DevicesPartialUpdateNameErrorComponent, DevicesPartialUpdateNonFieldErrorsErrorComponent, DevicesPartialUpdateOsLocaleErrorComponent, DevicesPartialUpdateOsNameErrorComponent, DevicesPartialUpdateOsNonFieldErrorsErrorComponent, DevicesPartialUpdateOsVersionErrorComponent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


