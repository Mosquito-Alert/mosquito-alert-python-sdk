# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from mosquito_alert.models.annotation_classification_request import AnnotationClassificationRequest
from mosquito_alert.models.annotation_feedback_request import AnnotationFeedbackRequest
from typing import Optional, Set
from typing_extensions import Self

class AnnotationRequest(BaseModel):
    """
    AnnotationRequest
    """ # noqa: E501
    best_photo_uuid: Optional[StrictStr] = None
    classification: Optional[AnnotationClassificationRequest]
    feedback: Optional[AnnotationFeedbackRequest] = None
    is_flagged: Optional[StrictBool] = False
    is_decisive: Optional[StrictBool] = False
    tags: Optional[List[Annotated[str, Field(min_length=1, strict=True)]]] = None
    __properties: ClassVar[List[str]] = ["best_photo_uuid", "classification", "feedback", "is_flagged", "is_decisive", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnnotationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of classification
        if self.classification:
            _dict['classification'] = self.classification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of feedback
        if self.feedback:
            _dict['feedback'] = self.feedback.to_dict()
        # set to None if classification (nullable) is None
        # and model_fields_set contains the field
        if self.classification is None and "classification" in self.model_fields_set:
            _dict['classification'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnnotationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "best_photo_uuid": obj.get("best_photo_uuid"),
            "classification": AnnotationClassificationRequest.from_dict(obj["classification"]) if obj.get("classification") is not None else None,
            "feedback": AnnotationFeedbackRequest.from_dict(obj["feedback"]) if obj.get("feedback") is not None else None,
            "is_flagged": obj.get("is_flagged") if obj.get("is_flagged") is not None else False,
            "is_decisive": obj.get("is_decisive") if obj.get("is_decisive") is not None else False,
            "tags": obj.get("tags")
        })
        return _obj


