# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from mosquito_alert.models.identificationtasks_review_create_action_error_component import IdentificationtasksReviewCreateActionErrorComponent
from mosquito_alert.models.identificationtasks_review_create_is_safe_error_component import IdentificationtasksReviewCreateIsSafeErrorComponent
from mosquito_alert.models.identificationtasks_review_create_non_field_errors_error_component import IdentificationtasksReviewCreateNonFieldErrorsErrorComponent
from mosquito_alert.models.identificationtasks_review_create_public_note_error_component import IdentificationtasksReviewCreatePublicNoteErrorComponent
from mosquito_alert.models.identificationtasks_review_create_public_photo_uuid_error_component import IdentificationtasksReviewCreatePublicPhotoUuidErrorComponent
from mosquito_alert.models.identificationtasks_review_create_result_confidence_label_error_component import IdentificationtasksReviewCreateResultConfidenceLabelErrorComponent
from mosquito_alert.models.identificationtasks_review_create_result_non_field_errors_error_component import IdentificationtasksReviewCreateResultNonFieldErrorsErrorComponent
from mosquito_alert.models.identificationtasks_review_create_result_taxon_id_error_component import IdentificationtasksReviewCreateResultTaxonIdErrorComponent
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

IDENTIFICATIONTASKSREVIEWCREATEERROR_ONE_OF_SCHEMAS = ["IdentificationtasksReviewCreateActionErrorComponent", "IdentificationtasksReviewCreateIsSafeErrorComponent", "IdentificationtasksReviewCreateNonFieldErrorsErrorComponent", "IdentificationtasksReviewCreatePublicNoteErrorComponent", "IdentificationtasksReviewCreatePublicPhotoUuidErrorComponent", "IdentificationtasksReviewCreateResultConfidenceLabelErrorComponent", "IdentificationtasksReviewCreateResultNonFieldErrorsErrorComponent", "IdentificationtasksReviewCreateResultTaxonIdErrorComponent"]

class IdentificationtasksReviewCreateError(BaseModel):
    """
    IdentificationtasksReviewCreateError
    """
    # data type: IdentificationtasksReviewCreateNonFieldErrorsErrorComponent
    oneof_schema_1_validator: Optional[IdentificationtasksReviewCreateNonFieldErrorsErrorComponent] = None
    # data type: IdentificationtasksReviewCreateActionErrorComponent
    oneof_schema_2_validator: Optional[IdentificationtasksReviewCreateActionErrorComponent] = None
    # data type: IdentificationtasksReviewCreatePublicPhotoUuidErrorComponent
    oneof_schema_3_validator: Optional[IdentificationtasksReviewCreatePublicPhotoUuidErrorComponent] = None
    # data type: IdentificationtasksReviewCreateIsSafeErrorComponent
    oneof_schema_4_validator: Optional[IdentificationtasksReviewCreateIsSafeErrorComponent] = None
    # data type: IdentificationtasksReviewCreatePublicNoteErrorComponent
    oneof_schema_5_validator: Optional[IdentificationtasksReviewCreatePublicNoteErrorComponent] = None
    # data type: IdentificationtasksReviewCreateResultNonFieldErrorsErrorComponent
    oneof_schema_6_validator: Optional[IdentificationtasksReviewCreateResultNonFieldErrorsErrorComponent] = None
    # data type: IdentificationtasksReviewCreateResultTaxonIdErrorComponent
    oneof_schema_7_validator: Optional[IdentificationtasksReviewCreateResultTaxonIdErrorComponent] = None
    # data type: IdentificationtasksReviewCreateResultConfidenceLabelErrorComponent
    oneof_schema_8_validator: Optional[IdentificationtasksReviewCreateResultConfidenceLabelErrorComponent] = None
    actual_instance: Optional[Union[IdentificationtasksReviewCreateActionErrorComponent, IdentificationtasksReviewCreateIsSafeErrorComponent, IdentificationtasksReviewCreateNonFieldErrorsErrorComponent, IdentificationtasksReviewCreatePublicNoteErrorComponent, IdentificationtasksReviewCreatePublicPhotoUuidErrorComponent, IdentificationtasksReviewCreateResultConfidenceLabelErrorComponent, IdentificationtasksReviewCreateResultNonFieldErrorsErrorComponent, IdentificationtasksReviewCreateResultTaxonIdErrorComponent]] = None
    one_of_schemas: Set[str] = { "IdentificationtasksReviewCreateActionErrorComponent", "IdentificationtasksReviewCreateIsSafeErrorComponent", "IdentificationtasksReviewCreateNonFieldErrorsErrorComponent", "IdentificationtasksReviewCreatePublicNoteErrorComponent", "IdentificationtasksReviewCreatePublicPhotoUuidErrorComponent", "IdentificationtasksReviewCreateResultConfidenceLabelErrorComponent", "IdentificationtasksReviewCreateResultNonFieldErrorsErrorComponent", "IdentificationtasksReviewCreateResultTaxonIdErrorComponent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = IdentificationtasksReviewCreateError.model_construct()
        error_messages = []
        match = 0
        # validate data type: IdentificationtasksReviewCreateNonFieldErrorsErrorComponent
        if not isinstance(v, IdentificationtasksReviewCreateNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksReviewCreateNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksReviewCreateActionErrorComponent
        if not isinstance(v, IdentificationtasksReviewCreateActionErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksReviewCreateActionErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksReviewCreatePublicPhotoUuidErrorComponent
        if not isinstance(v, IdentificationtasksReviewCreatePublicPhotoUuidErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksReviewCreatePublicPhotoUuidErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksReviewCreateIsSafeErrorComponent
        if not isinstance(v, IdentificationtasksReviewCreateIsSafeErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksReviewCreateIsSafeErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksReviewCreatePublicNoteErrorComponent
        if not isinstance(v, IdentificationtasksReviewCreatePublicNoteErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksReviewCreatePublicNoteErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksReviewCreateResultNonFieldErrorsErrorComponent
        if not isinstance(v, IdentificationtasksReviewCreateResultNonFieldErrorsErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksReviewCreateResultNonFieldErrorsErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksReviewCreateResultTaxonIdErrorComponent
        if not isinstance(v, IdentificationtasksReviewCreateResultTaxonIdErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksReviewCreateResultTaxonIdErrorComponent`")
        else:
            match += 1
        # validate data type: IdentificationtasksReviewCreateResultConfidenceLabelErrorComponent
        if not isinstance(v, IdentificationtasksReviewCreateResultConfidenceLabelErrorComponent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentificationtasksReviewCreateResultConfidenceLabelErrorComponent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in IdentificationtasksReviewCreateError with oneOf schemas: IdentificationtasksReviewCreateActionErrorComponent, IdentificationtasksReviewCreateIsSafeErrorComponent, IdentificationtasksReviewCreateNonFieldErrorsErrorComponent, IdentificationtasksReviewCreatePublicNoteErrorComponent, IdentificationtasksReviewCreatePublicPhotoUuidErrorComponent, IdentificationtasksReviewCreateResultConfidenceLabelErrorComponent, IdentificationtasksReviewCreateResultNonFieldErrorsErrorComponent, IdentificationtasksReviewCreateResultTaxonIdErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in IdentificationtasksReviewCreateError with oneOf schemas: IdentificationtasksReviewCreateActionErrorComponent, IdentificationtasksReviewCreateIsSafeErrorComponent, IdentificationtasksReviewCreateNonFieldErrorsErrorComponent, IdentificationtasksReviewCreatePublicNoteErrorComponent, IdentificationtasksReviewCreatePublicPhotoUuidErrorComponent, IdentificationtasksReviewCreateResultConfidenceLabelErrorComponent, IdentificationtasksReviewCreateResultNonFieldErrorsErrorComponent, IdentificationtasksReviewCreateResultTaxonIdErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into IdentificationtasksReviewCreateNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = IdentificationtasksReviewCreateNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksReviewCreateActionErrorComponent
        try:
            instance.actual_instance = IdentificationtasksReviewCreateActionErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksReviewCreatePublicPhotoUuidErrorComponent
        try:
            instance.actual_instance = IdentificationtasksReviewCreatePublicPhotoUuidErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksReviewCreateIsSafeErrorComponent
        try:
            instance.actual_instance = IdentificationtasksReviewCreateIsSafeErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksReviewCreatePublicNoteErrorComponent
        try:
            instance.actual_instance = IdentificationtasksReviewCreatePublicNoteErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksReviewCreateResultNonFieldErrorsErrorComponent
        try:
            instance.actual_instance = IdentificationtasksReviewCreateResultNonFieldErrorsErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksReviewCreateResultTaxonIdErrorComponent
        try:
            instance.actual_instance = IdentificationtasksReviewCreateResultTaxonIdErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentificationtasksReviewCreateResultConfidenceLabelErrorComponent
        try:
            instance.actual_instance = IdentificationtasksReviewCreateResultConfidenceLabelErrorComponent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into IdentificationtasksReviewCreateError with oneOf schemas: IdentificationtasksReviewCreateActionErrorComponent, IdentificationtasksReviewCreateIsSafeErrorComponent, IdentificationtasksReviewCreateNonFieldErrorsErrorComponent, IdentificationtasksReviewCreatePublicNoteErrorComponent, IdentificationtasksReviewCreatePublicPhotoUuidErrorComponent, IdentificationtasksReviewCreateResultConfidenceLabelErrorComponent, IdentificationtasksReviewCreateResultNonFieldErrorsErrorComponent, IdentificationtasksReviewCreateResultTaxonIdErrorComponent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into IdentificationtasksReviewCreateError with oneOf schemas: IdentificationtasksReviewCreateActionErrorComponent, IdentificationtasksReviewCreateIsSafeErrorComponent, IdentificationtasksReviewCreateNonFieldErrorsErrorComponent, IdentificationtasksReviewCreatePublicNoteErrorComponent, IdentificationtasksReviewCreatePublicPhotoUuidErrorComponent, IdentificationtasksReviewCreateResultConfidenceLabelErrorComponent, IdentificationtasksReviewCreateResultNonFieldErrorsErrorComponent, IdentificationtasksReviewCreateResultTaxonIdErrorComponent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], IdentificationtasksReviewCreateActionErrorComponent, IdentificationtasksReviewCreateIsSafeErrorComponent, IdentificationtasksReviewCreateNonFieldErrorsErrorComponent, IdentificationtasksReviewCreatePublicNoteErrorComponent, IdentificationtasksReviewCreatePublicPhotoUuidErrorComponent, IdentificationtasksReviewCreateResultConfidenceLabelErrorComponent, IdentificationtasksReviewCreateResultNonFieldErrorsErrorComponent, IdentificationtasksReviewCreateResultTaxonIdErrorComponent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


