# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ObservationPrediction(BaseModel):
    """
    ObservationPrediction
    """ # noqa: E501
    ref_photo_uuid: StrictStr = Field(description="The selected photo whose prediction represents the observation as the best classification result.")
    insect_confidence: Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]
    predicted_class: StrictStr
    predicted_class_display: StrictStr
    is_executive_validation: StrictBool = Field(description="Whether if the photo prediction will be used as an executive validation for the report.")
    created_at: datetime
    updated_at: datetime
    __properties: ClassVar[List[str]] = ["ref_photo_uuid", "insect_confidence", "predicted_class", "predicted_class_display", "is_executive_validation", "created_at", "updated_at"]

    @field_validator('predicted_class')
    def predicted_class_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ae_albopictus', 'ae_aegypti', 'ae_japonicus', 'ae_koreicus', 'culex', 'anopheles', 'culiseta', 'other_species', 'not_sure']):
            raise ValueError("must be one of enum values ('ae_albopictus', 'ae_aegypti', 'ae_japonicus', 'ae_koreicus', 'culex', 'anopheles', 'culiseta', 'other_species', 'not_sure')")
        return value

    @field_validator('predicted_class_display')
    def predicted_class_display_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Aedes albopictus', 'Aedes aegypti', 'Aedes japonicus', 'Aedes koreicus', 'Culex (s.p)', 'Anopheles (s.p.)', 'Culiseta (s.p.)', 'Ohter species', 'Unidentifiable']):
            raise ValueError("must be one of enum values ('Aedes albopictus', 'Aedes aegypti', 'Aedes japonicus', 'Aedes koreicus', 'Culex (s.p)', 'Anopheles (s.p.)', 'Culiseta (s.p.)', 'Ohter species', 'Unidentifiable')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObservationPrediction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "insect_confidence",
            "predicted_class",
            "predicted_class_display",
            "is_executive_validation",
            "created_at",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObservationPrediction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ref_photo_uuid": obj.get("ref_photo_uuid"),
            "insect_confidence": obj.get("insect_confidence"),
            "predicted_class": obj.get("predicted_class"),
            "predicted_class_display": obj.get("predicted_class_display"),
            "is_executive_validation": obj.get("is_executive_validation") if obj.get("is_executive_validation") is not None else False,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


