# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from mosquito_alert.models.breeding_site_request import BreedingSiteRequest

class TestBreedingSiteRequest(unittest.TestCase):
    """BreedingSiteRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BreedingSiteRequest:
        """Test BreedingSiteRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BreedingSiteRequest`
        """
        model = BreedingSiteRequest()
        if include_optional:
            return BreedingSiteRequest(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                sent_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                location = mosquito_alert.models.location_request.LocationRequest(
                    type = 'current', 
                    point = mosquito_alert.models.location_point.Location_point(
                        latitude = 1.337, 
                        longitude = 1.337, ), ),
                note = '',
                tags = [
                    '0'
                    ],
                package = mosquito_alert.models.package_request.PackageRequest(
                    name = '', 
                    version = -2147483648, 
                    language = '', ),
                device = mosquito_alert.models.device_request.DeviceRequest(
                    manufacturer = '', 
                    model = '', 
                    os = '', 
                    os_version = '', 
                    os_language = '', ),
                photos = [
                    mosquito_alert.models.simple_photo_request.SimplePhotoRequest(
                        file = bytes(b'blah'), )
                    ],
                site_type = 'basin',
                has_water = True,
                in_public_area = True,
                has_near_mosquitoes = True,
                has_larvae = True
            )
        else:
            return BreedingSiteRequest(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                sent_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                location = mosquito_alert.models.location_request.LocationRequest(
                    type = 'current', 
                    point = mosquito_alert.models.location_point.Location_point(
                        latitude = 1.337, 
                        longitude = 1.337, ), ),
                photos = [
                    mosquito_alert.models.simple_photo_request.SimplePhotoRequest(
                        file = bytes(b'blah'), )
                    ],
        )
        """

    def testBreedingSiteRequest(self):
        """Test BreedingSiteRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
