# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from mosquito_alert.models.photo_prediction_request import PhotoPredictionRequest

class TestPhotoPredictionRequest(unittest.TestCase):
    """PhotoPredictionRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PhotoPredictionRequest:
        """Test PhotoPredictionRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PhotoPredictionRequest`
        """
        model = PhotoPredictionRequest()
        if include_optional:
            return PhotoPredictionRequest(
                bbox = mosquito_alert.models.bounding_box_request.BoundingBoxRequest(
                    x_min = 0.0, 
                    y_min = 0.0, 
                    x_max = 0.0, 
                    y_max = 0.0, ),
                insect_confidence = 0.0,
                predicted_class = 'ae_albopictus',
                threshold_deviation = -1.0,
                is_decisive = True,
                scores = mosquito_alert.models.prediction_score_request.PredictionScoreRequest(
                    ae_albopictus = 0.0, 
                    ae_aegypti = 0.0, 
                    ae_japonicus = 0.0, 
                    ae_koreicus = 0.0, 
                    culex = 0.0, 
                    anopheles = 0.0, 
                    culiseta = 0.0, 
                    other_species = 0.0, 
                    not_sure = 0.0, ),
                classifier_version = 'v2023.1'
            )
        else:
            return PhotoPredictionRequest(
                bbox = mosquito_alert.models.bounding_box_request.BoundingBoxRequest(
                    x_min = 0.0, 
                    y_min = 0.0, 
                    x_max = 0.0, 
                    y_max = 0.0, ),
                insect_confidence = 0.0,
                predicted_class = 'ae_albopictus',
                threshold_deviation = -1.0,
                scores = mosquito_alert.models.prediction_score_request.PredictionScoreRequest(
                    ae_albopictus = 0.0, 
                    ae_aegypti = 0.0, 
                    ae_japonicus = 0.0, 
                    ae_koreicus = 0.0, 
                    culex = 0.0, 
                    anopheles = 0.0, 
                    culiseta = 0.0, 
                    other_species = 0.0, 
                    not_sure = 0.0, ),
                classifier_version = 'v2023.1',
        )
        """

    def testPhotoPredictionRequest(self):
        """Test PhotoPredictionRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
