# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from mosquito_alert.models.annotation import Annotation

class TestAnnotation(unittest.TestCase):
    """Annotation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Annotation:
        """Test Annotation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Annotation`
        """
        model = Annotation()
        if include_optional:
            return Annotation(
                id = 56,
                observation_uuid = '',
                user = mosquito_alert.models.simple_annotator_user.SimpleAnnotatorUser(
                    uuid = '', 
                    username = '', 
                    first_name = '', 
                    last_name = '', 
                    full_name = '', ),
                best_photo = mosquito_alert.models.simple_photo.SimplePhoto(
                    uuid = '', 
                    url = '', ),
                classification = mosquito_alert.models.annotation_classification.AnnotationClassification(
                    taxon = null, 
                    confidence = 1.337, 
                    confidence_label = 'definitely', 
                    is_high_confidence = True, ),
                feedback = mosquito_alert.models.annotation_feedback.AnnotationFeedback(
                    public_note = '', 
                    internal_note = '', 
                    user_note = '', ),
                type = 'short',
                is_flagged = True,
                is_decisive = True,
                observation_flags = mosquito_alert.models.observation_flags.ObservationFlags(
                    is_favourite = True, 
                    is_visible = True, ),
                tags = [
                    ''
                    ],
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return Annotation(
                id = 56,
                observation_uuid = '',
                user = mosquito_alert.models.simple_annotator_user.SimpleAnnotatorUser(
                    uuid = '', 
                    username = '', 
                    first_name = '', 
                    last_name = '', 
                    full_name = '', ),
                best_photo = mosquito_alert.models.simple_photo.SimplePhoto(
                    uuid = '', 
                    url = '', ),
                classification = mosquito_alert.models.annotation_classification.AnnotationClassification(
                    taxon = null, 
                    confidence = 1.337, 
                    confidence_label = 'definitely', 
                    is_high_confidence = True, ),
                type = 'short',
                is_flagged = True,
                is_decisive = True,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testAnnotation(self):
        """Test Annotation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
