# coding: utf-8

"""
    Mosquito Alert API

    Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.

    The version of the OpenAPI document: v1
    Contact: it@mosquitoalert.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from mosquito_alert.models.identification_task import IdentificationTask

class TestIdentificationTask(unittest.TestCase):
    """IdentificationTask unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IdentificationTask:
        """Test IdentificationTask
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IdentificationTask`
        """
        model = IdentificationTask()
        if include_optional:
            return IdentificationTask(
                observation = mosquito_alert.models.simplified_observation.SimplifiedObservation(
                    uuid = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_at_local = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    received_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    location = mosquito_alert.models.simplified_location.SimplifiedLocation(
                        point = mosquito_alert.models.location_point.Location_point(
                            latitude = 1.337, 
                            longitude = 1.337, ), 
                        timezone = 'Africa/Abidjan', 
                        display_name = '', 
                        country = null, ), 
                    note = '', ),
                public_photo = mosquito_alert.models.simple_photo.SimplePhoto(
                    uuid = '', 
                    url = '', ),
                annotators = [
                    mosquito_alert.models.simple_annotator_user.SimpleAnnotatorUser(
                        id = 56, 
                        username = 'A', 
                        first_name = '', 
                        last_name = '', 
                        full_name = '', )
                    ],
                status = 'open',
                is_flagged = True,
                is_safe = True,
                public_note = '',
                num_annotations = 0,
                review = mosquito_alert.models.identification_task_review.IdentificationTaskReview(
                    type = 'agree', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                result = mosquito_alert.models.identification_task_result.IdentificationTaskResult(
                    source = 'expert', 
                    taxon = null, 
                    is_high_confidence = True, 
                    confidence = 0, 
                    confidence_label = '', 
                    uncertainty = 0, 
                    agreement = 0, ),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return IdentificationTask(
                observation = mosquito_alert.models.simplified_observation.SimplifiedObservation(
                    uuid = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_at_local = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    received_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    location = mosquito_alert.models.simplified_location.SimplifiedLocation(
                        point = mosquito_alert.models.location_point.Location_point(
                            latitude = 1.337, 
                            longitude = 1.337, ), 
                        timezone = 'Africa/Abidjan', 
                        display_name = '', 
                        country = null, ), 
                    note = '', ),
                public_photo = mosquito_alert.models.simple_photo.SimplePhoto(
                    uuid = '', 
                    url = '', ),
                annotators = [
                    mosquito_alert.models.simple_annotator_user.SimpleAnnotatorUser(
                        id = 56, 
                        username = 'A', 
                        first_name = '', 
                        last_name = '', 
                        full_name = '', )
                    ],
                is_flagged = True,
                is_safe = True,
                public_note = '',
                num_annotations = 0,
                review = mosquito_alert.models.identification_task_review.IdentificationTaskReview(
                    type = 'agree', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                result = mosquito_alert.models.identification_task_result.IdentificationTaskResult(
                    source = 'expert', 
                    taxon = null, 
                    is_high_confidence = True, 
                    confidence = 0, 
                    confidence_label = '', 
                    uncertainty = 0, 
                    agreement = 0, ),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testIdentificationTask(self):
        """Test IdentificationTask"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
